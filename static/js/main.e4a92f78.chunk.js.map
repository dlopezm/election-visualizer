{"version":3,"sources":["state/Status.ts","utils.ts","components/Ballot.tsx","state/CalculateState.ts","constants.ts","components/Candidate.tsx","components/CandidateTable.tsx","App.tsx","index.tsx"],"names":["Status","formatNumber","value","places","expandedPlaces","Math","pow","round","range","length","Array","from","keys","Ballot","props","ballot","className","votes","map","vote","key","candidateName","status","eliminated","elected","undefined","calculateNewPhase","candidates","ballots","candidateStateForThisPhase","candidate","votesOnCurrentRound","fill","forEach","reduce","acc","find","name","active","push","console","error","index","votedCandidate","sort","a","b","positionWhenElected","i","result","newCandidates","newBallots","calculateState","autoElectQuota","ceil","log","state","phases","activePhase","phase","cloneDeep","someCandidateElectedThisPhase","activeCandidateVotes","votesOnLastStage","extraVotesToDistribute","votedForElectedCandidate","extraVotesDistributed","candidateToDistributeVotesTo","eliminatedCandidateName","eliminateCandidate","filter","Candidate","this","expanded","votesToRender","slice","React","Component","CandidateTable","onClick","setState","App","useState","fullState","setFullState","useEffect","fetch","process","response","text","parsed","csvParser","parse","candidateNames","data","match","splitName","split","join","rawBallots","rawBallot","ballotWithoutTimestamp","number","choiceIndex","findIndex","choice","includes","String","getData","max","disabled","min","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4a92f78.chunk.js","sourcesContent":["export enum Status {\r\n    active,\r\n    elected,\r\n    eliminated,\r\n}\r\n","export const formatNumber = (value: number, places: number): number => {\r\n    const expandedPlaces = Math.pow(10, places);\r\n    return Math.round(value * expandedPlaces) / expandedPlaces;\r\n};\r\n\r\nexport const range = (length: number): number[] => Array.from(Array(length).keys());\r\n","import React, { ReactElement } from 'react';\r\nimport './components.css';\r\nimport { Ballot as BallotType } from '../state/Ballot';\r\nimport { Status } from '../state/Status';\r\nimport { formatNumber } from '../utils';\r\n\r\nexport interface Props {\r\n    ballot: BallotType;\r\n}\r\n\r\nexport function Ballot(props: Props): ReactElement {\r\n    const { ballot } = props;\r\n    return (\r\n        <div className=\"Ballot\">\r\n            <ul>\r\n                {ballot.votes.map((vote) => (\r\n                    <>\r\n                        <li\r\n                            key={vote.candidateName}\r\n                            className={\r\n                                vote.status === Status.eliminated\r\n                                    ? 'eliminated'\r\n                                    : vote.status === Status.elected\r\n                                    ? 'elected'\r\n                                    : undefined\r\n                            }\r\n                        >\r\n                            {vote.candidateName}\r\n                            {vote.value !== 1 ? `(${formatNumber(vote.value, 3)})` : ''}\r\n                        </li>\r\n                        <br />\r\n                    </>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n","import cloneDeep from 'lodash.clonedeep';\r\n\r\nimport { NUM_ELECTED, NUM_VOTED, QUOTA_RATIO } from '../constants';\r\nimport { Ballot, Vote } from './Ballot';\r\nimport { Candidate } from './Candidate';\r\nimport { Phase, State } from './State';\r\nimport { Status } from './Status';\r\n\r\nfunction calculateNewPhase(\r\n    candidates: Candidate[],\r\n    ballots: Ballot[]\r\n): { newCandidates: Candidate[]; newBallots: Ballot[] } {\r\n    const candidateStateForThisPhase = candidates.map((candidate) => ({\r\n        ...candidate,\r\n        votesOnCurrentRound: Array(NUM_VOTED).fill(0),\r\n    }));\r\n    ballots.forEach((ballot) => {\r\n        const preferences = ballot.votes.reduce((acc, vote) => {\r\n            const candidate = candidateStateForThisPhase.find((candidate) => candidate.name === vote.candidateName);\r\n            if (!candidate) {\r\n                console.error(\r\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\r\n                );\r\n            } else if (vote.status === Status.active) {\r\n                acc.push(vote);\r\n            }\r\n            return acc;\r\n        }, new Array<Vote>());\r\n        preferences.forEach((vote, index) => {\r\n            const votedCandidate = candidateStateForThisPhase.find(\r\n                (candidate) => candidate.name === vote.candidateName\r\n            );\r\n            if (votedCandidate) {\r\n                votedCandidate.votesOnCurrentRound[index] += vote.value;\r\n            } else {\r\n                // doing this mostly to keep the very strict eslint happy\r\n                console.error(\r\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\r\n                );\r\n            }\r\n        });\r\n    });\r\n\r\n    candidateStateForThisPhase.sort((a, b) => {\r\n        if (a.positionWhenElected !== undefined && b.positionWhenElected !== undefined) {\r\n            return a.positionWhenElected - b.positionWhenElected;\r\n        }\r\n        if (a.positionWhenElected !== undefined && b.positionWhenElected === undefined) {\r\n            return -1;\r\n        }\r\n        if (a.positionWhenElected === undefined && b.positionWhenElected !== undefined) {\r\n            return 1;\r\n        }\r\n        for (let i = 0; i < a.votesOnCurrentRound.length; ++i) {\r\n            const result = b.votesOnCurrentRound[i] - a.votesOnCurrentRound[i];\r\n            if (result !== 0) {\r\n                return result;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n    return { newCandidates: candidateStateForThisPhase, newBallots: ballots };\r\n}\r\n\r\nfunction eliminateCandidate(phase: Phase): void {\r\n    let eliminatedCandidateName: string | null = null;\r\n    for (let i = phase.candidates.length - 1; i >= 0; --i) {\r\n        if (phase.candidates[i].status === Status.active) {\r\n            eliminatedCandidateName = phase.candidates[i].name;\r\n            phase.candidates[i].status = Status.eliminated;\r\n            phase.candidates[i].votesOnLastStage = phase.candidates[i].votesOnCurrentRound;\r\n            break;\r\n        }\r\n    }\r\n\r\n    phase.ballots.forEach((ballot) => {\r\n        ballot.votes.forEach((vote) => {\r\n            if (vote.candidateName === eliminatedCandidateName) {\r\n                vote.status = Status.eliminated;\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport const calculateState = (candidates: Candidate[], ballots: Ballot[]): State => {\r\n    const autoElectQuota = Math.ceil(ballots.length * QUOTA_RATIO);\r\n    console.log(`Any candidate with ${autoElectQuota} votes or more is automatically elected`);\r\n\r\n    const state: State = { phases: [], activePhase: 0 };\r\n\r\n    const { newCandidates, newBallots } = calculateNewPhase(candidates, ballots);\r\n\r\n    state.phases.push({\r\n        candidates: newCandidates,\r\n        ballots: newBallots,\r\n    });\r\n\r\n    while (\r\n        state.phases[state.phases.length - 1].candidates.filter((candidate) => candidate.status === Status.elected)\r\n            .length < NUM_ELECTED\r\n    ) {\r\n        console.log('Phase', state.phases.length, 'starting');\r\n        const phase = cloneDeep(state.phases[state.phases.length - 1]);\r\n        let someCandidateElectedThisPhase = false;\r\n\r\n        for (let i = 0; i < phase.candidates.length && !someCandidateElectedThisPhase; ++i) {\r\n            const candidate = phase.candidates[i];\r\n            const activeCandidateVotes = candidate.votesOnCurrentRound[0];\r\n            if (candidate.status !== Status.elected && activeCandidateVotes >= autoElectQuota) {\r\n                phase.candidates[i].status = Status.elected;\r\n                phase.candidates[i].votesOnLastStage = candidate.votesOnCurrentRound;\r\n                phase.candidates[i].positionWhenElected = i;\r\n                someCandidateElectedThisPhase = true;\r\n                console.log(`${candidate.name} elected!`);\r\n                const extraVotesToDistribute = (activeCandidateVotes - autoElectQuota) / activeCandidateVotes;\r\n                phase.ballots.forEach((ballot) => {\r\n                    let votedForElectedCandidate = false;\r\n                    let extraVotesDistributed = false;\r\n                    ballot.votes.forEach((vote) => {\r\n                        if (votedForElectedCandidate && !extraVotesDistributed) {\r\n                            const candidateToDistributeVotesTo = phase.candidates.find(\r\n                                (candidate) => candidate.name === vote.candidateName\r\n                            );\r\n                            if (candidateToDistributeVotesTo && candidateToDistributeVotesTo.status === Status.active) {\r\n                                vote.value = extraVotesToDistribute;\r\n                                extraVotesDistributed = true;\r\n                            }\r\n                        }\r\n                        if (vote.candidateName === candidate.name) {\r\n                            vote.status = Status.elected;\r\n                            votedForElectedCandidate = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\r\n                state.phases.push({\r\n                    candidates: newCandidates,\r\n                    ballots: newBallots,\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!someCandidateElectedThisPhase) {\r\n            eliminateCandidate(phase);\r\n\r\n            const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\r\n            state.phases.push({\r\n                candidates: newCandidates,\r\n                ballots: newBallots,\r\n            });\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","export const NUM_ELECTED = 3;\r\nexport const NUM_VOTED = 3;\r\nexport const QUOTA_RATIO = 0.25; // what ratio of the total votes a candidate needs to be automatically elected\r\n","import React, { ReactElement } from 'react';\r\nimport './components.css';\r\nimport { Candidate as CandidateType } from '../state/Candidate';\r\nimport { Status } from '../state/Status';\r\nimport { formatNumber } from '../utils';\r\n\r\nexport interface Props {\r\n    candidate: CandidateType;\r\n    expanded: boolean;\r\n}\r\n\r\nexport class Candidate extends React.Component<Props> {\r\n    render(): ReactElement {\r\n        const { candidate, expanded } = this.props;\r\n\r\n        let votesToRender = candidate.votesOnLastStage ? candidate.votesOnLastStage : candidate.votesOnCurrentRound;\r\n        if (!expanded) {\r\n            votesToRender = votesToRender.slice(0, 1);\r\n        }\r\n        return (\r\n            <tr\r\n                key={candidate.name}\r\n                className={\r\n                    candidate.status === Status.eliminated\r\n                        ? 'eliminated'\r\n                        : candidate.status === Status.elected\r\n                        ? 'elected'\r\n                        : undefined\r\n                }\r\n            >\r\n                <td>{candidate.name}</td>\r\n                {votesToRender.map((value, index) => (\r\n                    <td key={index}>{formatNumber(value, 3)}</td>\r\n                ))}\r\n                {expanded && <td key={'total'}>{votesToRender.reduce((acc, vote) => acc + vote, 0)}</td>}\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nimport './components.css';\r\nimport { Candidate as CandidateType } from '../state/Candidate';\r\nimport { Candidate } from './Candidate';\r\nimport { range } from '../utils';\r\nimport { NUM_VOTED } from '../constants';\r\n\r\nexport interface Props {\r\n    candidates: CandidateType[];\r\n}\r\n\r\nexport interface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport class CandidateTable extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: false,\r\n        };\r\n    }\r\n\r\n    render(): ReactElement {\r\n        const { candidates } = this.props;\r\n        const { expanded } = this.state;\r\n        let votesToRender = range(NUM_VOTED);\r\n        if (!expanded) {\r\n            votesToRender = votesToRender.slice(0, 1);\r\n        }\r\n        return (\r\n            <div className=\"candidateTableWrapper\">\r\n                <table className=\"candidateTable\">\r\n                    <FlipMove>\r\n                        <tr>\r\n                            <th>Candidate</th>\r\n                            {votesToRender.map((index) => (\r\n                                <th key={index}>{`Rank ${index + 1} votes`}</th>\r\n                            ))}\r\n                            {expanded && <th>Total</th>}\r\n                        </tr>\r\n                        {candidates.map((candidate) => (\r\n                            <Candidate key={candidate.name} candidate={candidate} expanded={this.state.expanded} />\r\n                        ))}\r\n                    </FlipMove>\r\n                </table>\r\n                <button\r\n                    className=\"expandButton\"\r\n                    onClick={(): void => this.setState({ expanded: !this.state.expanded })}\r\n                >\r\n                    {this.state.expanded ? '<' : '>'}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { ReactElement, useEffect, useState } from 'react';\r\nimport csvParser from 'papaparse';\r\n\r\nimport './App.css';\r\nimport { Ballot } from './components/Ballot';\r\nimport { Ballot as BallotType } from './state/Ballot';\r\nimport { State } from './state/State';\r\nimport { Status } from './state/Status';\r\nimport { calculateState } from './state/CalculateState';\r\nimport { CandidateTable } from './components/CandidateTable';\r\nimport { range } from './utils';\r\nimport { NUM_VOTED } from './constants';\r\n\r\nfunction App(): ReactElement {\r\n    const [fullState, setFullState] = useState<State>({ phases: [], activePhase: 0 });\r\n    useEffect(() => {\r\n        async function getData(): Promise<void> {\r\n            const response = await fetch(`${process.env.PUBLIC_URL}/data/Inaugural_Ballot.csv`);\r\n            const text = await response.text();\r\n            const parsed = csvParser.parse(text);\r\n\r\n            const candidateNames = (parsed.data[0] as string[]).slice(1);\r\n\r\n            const candidates = candidateNames.map((candidate) => {\r\n                const match = candidate.match(/\\[(.*)\\]/);\r\n                const name = match ? match[1] : '';\r\n                const splitName = name.split(' ');\r\n                const reorderedName = [splitName[splitName.length - 1], ...splitName.slice(0, splitName.length - 1)];\r\n                const finalName = reorderedName.join(' ');\r\n                return {\r\n                    name: finalName,\r\n                    status: Status.active,\r\n                    votesOnCurrentRound: Array(NUM_VOTED).fill(0),\r\n                };\r\n            });\r\n\r\n            const rawBallots = (parsed.data as string[][]).slice(1);\r\n            const ballots = rawBallots.map(\r\n                (rawBallot): BallotType => {\r\n                    const ballotWithoutTimestamp = rawBallot.slice(1);\r\n\r\n                    const rankedCandidateNames = range(NUM_VOTED).map((number) => {\r\n                        const choiceIndex = ballotWithoutTimestamp.findIndex((choice) =>\r\n                            choice.includes(String(number + 1))\r\n                        );\r\n                        const candidateName = candidates[choiceIndex].name;\r\n                        return {\r\n                            candidateName: candidateName,\r\n                            status: Status.active,\r\n                            value: 1,\r\n                        };\r\n                    });\r\n\r\n                    return {\r\n                        votes: rankedCandidateNames,\r\n                    };\r\n                }\r\n            );\r\n            const state = calculateState(candidates, ballots);\r\n            setFullState(state);\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    function incrementPhase(): void {\r\n        setFullState({\r\n            ...fullState,\r\n            activePhase: Math.min(fullState.phases.length - 1, fullState.activePhase + 1),\r\n        });\r\n    }\r\n\r\n    function decrementPhase(): void {\r\n        setFullState({\r\n            ...fullState,\r\n            activePhase: Math.max(0, fullState.activePhase - 1),\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                {fullState.phases[fullState.activePhase] && (\r\n                    <>\r\n                        <CandidateTable\r\n                            candidates={fullState.phases[fullState.activePhase].candidates}\r\n                        ></CandidateTable>\r\n                    </>\r\n                )}\r\n            </div>\r\n            <div>\r\n                <button onClick={decrementPhase} disabled={fullState.activePhase === 0}>\r\n                    Previous phase\r\n                </button>\r\n                <button onClick={incrementPhase} disabled={fullState.activePhase === fullState.phases.length - 1}>\r\n                    Next phase\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {fullState.phases[fullState.activePhase] &&\r\n                    fullState.phases[fullState.activePhase].ballots.map((ballot, index) => (\r\n                        <Ballot key={index} ballot={ballot} />\r\n                    ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}