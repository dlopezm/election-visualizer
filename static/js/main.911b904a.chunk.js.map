{"version":3,"sources":["stv/state/Status.ts","utils.ts","stv/components/Ballot.tsx","stv/components/Candidate.tsx","stv/components/CandidateTable.tsx","stv/constants.ts","stv/components/Election.tsx","scoreVoting/components/BallotTable.tsx","scoreVoting/components/Candidate.tsx","scoreVoting/components/CandidateTable.tsx","scoreVoting/state/ScoreVotingElection.ts","scoreVoting/components/Election.tsx","ElectionSelector.tsx","elections.ts","stv/state/CalculateState.ts","stv/CalculateSTVElection.ts","scoreVoting/CalculateScoreVotingElection.ts","App.tsx","index.tsx"],"names":["Status","formatNumber","value","places","expandedPlaces","Math","pow","round","range","length","Array","from","keys","Ballot","props","ballot","className","votes","map","vote","key","candidateName","status","eliminated","elected","undefined","Candidate","this","candidate","expanded","votesToRender","votesOnLastStage","votesOnCurrentRound","slice","name","index","reduce","acc","React","Component","CandidateTable","state","candidates","onClick","setState","Election","election","useState","phase","setPhase","activePhase","phases","info","max","disabled","min","ballots","BallotTable","candidatesInOrder","cloneDeep","sort","a","b","originalOrder","score","isElected","averageScore","votesPerScore","noOpVotes","setExpanded","scores","current","ElectionSelector","elections","setActiveIndex","activeIndex","title","ELECTIONS","fileName","system","calculateNewPhase","candidateStateForThisPhase","fill","forEach","find","active","push","console","error","votedCandidate","positionWhenElected","i","result","newCandidates","newBallots","calculateElection","autoElectQuota","floor","log","someCandidateElectedThisPhase","activeCandidateVotes","extraVotesToDistribute","votedForElectedCandidate","extraVotesDistributed","activeCandidatesBeforeWinner","candidateToDistributeVotesTo","eliminatedName","eliminatedCandidateName","Error","eliminateCandidate","filter","calculateSTVElection","parsed","data","match","splitName","split","join","rawBallot","ballotWithoutTimestamp","number","choiceIndex","findIndex","choice","includes","String","calculateScoreVotingElection","Number","totalScore","numVotes","totalVotes","MAX_SCORE","App","fullState","setFullState","activeElectionIndex","setActiveElectionIndex","useEffect","fetch","process","response","text","csvParser","parse","getData","activeElection","activeElectionSystem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.911b904a.chunk.js","sourcesContent":["export enum Status {\r\n    active,\r\n    elected,\r\n    eliminated,\r\n}\r\n","export const formatNumber = (value: number, places: number): number => {\r\n    const expandedPlaces = Math.pow(10, places);\r\n    return Math.round(value * expandedPlaces) / expandedPlaces;\r\n};\r\n\r\nexport const range = (length: number): number[] => Array.from(Array(length).keys());\r\n","import React, { ReactElement } from 'react';\r\nimport '../../components.css';\r\nimport { Ballot as BallotType } from '../state/Ballot';\r\nimport { Status } from '../state/Status';\r\nimport { formatNumber } from '../../utils';\r\n\r\nexport interface Props {\r\n    ballot: BallotType;\r\n}\r\n\r\nexport function Ballot(props: Props): ReactElement {\r\n    const { ballot } = props;\r\n    return (\r\n        <div className=\"Ballot\">\r\n            <ul>\r\n                {ballot.votes.map((vote) => (\r\n                    <>\r\n                        <li\r\n                            key={vote.candidateName}\r\n                            className={`${\r\n                                vote.status === Status.eliminated\r\n                                    ? 'eliminated'\r\n                                    : vote.status === Status.elected\r\n                                    ? 'elected'\r\n                                    : undefined\r\n                            } animated`}\r\n                        >\r\n                            {vote.candidateName}\r\n                            {vote.value !== 1 ? `(${formatNumber(vote.value, 3)})` : ''}\r\n                        </li>\r\n                        <br />\r\n                    </>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport '../../components.css';\r\nimport { Candidate as CandidateType } from '../state/Candidate';\r\nimport { Status } from '../state/Status';\r\nimport { formatNumber } from '../../utils';\r\n\r\nexport interface Props {\r\n    candidate: CandidateType;\r\n    expanded: boolean;\r\n}\r\n\r\nexport class Candidate extends React.Component<Props> {\r\n    render(): ReactElement {\r\n        const { candidate, expanded } = this.props;\r\n\r\n        let votesToRender = candidate.votesOnLastStage ? candidate.votesOnLastStage : candidate.votesOnCurrentRound;\r\n        if (!expanded) {\r\n            votesToRender = votesToRender.slice(0, 1);\r\n        }\r\n        return (\r\n            <tr\r\n                key={candidate.name}\r\n                className={`${\r\n                    candidate.status === Status.eliminated\r\n                        ? 'eliminated'\r\n                        : candidate.status === Status.elected\r\n                        ? 'elected'\r\n                        : undefined\r\n                } animated`}\r\n            >\r\n                <td>{candidate.name}</td>\r\n                {votesToRender.map((value, index) => (\r\n                    <td key={index}>{formatNumber(value, 3)}</td>\r\n                ))}\r\n                {expanded && <td key={'total'}>{votesToRender.reduce((acc, vote) => acc + vote, 0)}</td>}\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n","import React, { ReactElement } from 'react';\r\n\r\nimport '../../components.css';\r\nimport { Candidate as CandidateType } from '../state/Candidate';\r\nimport { Candidate } from './Candidate';\r\nimport { range } from '../../utils';\r\nimport { NUM_VOTED } from '../constants';\r\n\r\nexport interface Props {\r\n    candidates: CandidateType[];\r\n}\r\n\r\nexport interface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport class CandidateTable extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: false,\r\n        };\r\n    }\r\n\r\n    render(): ReactElement {\r\n        const { candidates } = this.props;\r\n        const { expanded } = this.state;\r\n        let votesToRender = range(NUM_VOTED);\r\n        if (!expanded) {\r\n            votesToRender = votesToRender.slice(0, 1);\r\n        }\r\n        return (\r\n            <div className=\"candidateTableWrapper\">\r\n                <table className=\"candidateTable\">\r\n                    <tr>\r\n                        <th>Candidate</th>\r\n                        {votesToRender.map((index) => (\r\n                            <th key={index}>{`Rank ${index + 1} votes`}</th>\r\n                        ))}\r\n                        {expanded && <th>Total</th>}\r\n                    </tr>\r\n                    {candidates.map((candidate) => (\r\n                        <Candidate key={candidate.name} candidate={candidate} expanded={this.state.expanded} />\r\n                    ))}\r\n                </table>\r\n\r\n                <button\r\n                    className=\"expandButton\"\r\n                    onClick={(): void => this.setState({ expanded: !this.state.expanded })}\r\n                >\r\n                    {this.state.expanded ? '<' : '...'}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export const NUM_ELECTED = 3;\r\nexport const NUM_VOTED = 3;\r\nexport const QUOTA_RATIO = 0.25; // what ratio of the total votes a candidate needs to be automatically elected\r\n","import React, { ReactElement, useState } from 'react';\r\n\r\nimport { Ballot } from './Ballot';\r\nimport { Election as ElectionType } from './../state/Election';\r\nimport { CandidateTable } from './CandidateTable';\r\n\r\ninterface Props {\r\n    election: ElectionType;\r\n}\r\n\r\nexport function Election(props: Props): ReactElement {\r\n    const { election } = props;\r\n    const [phase, setPhase] = useState<number>(0);\r\n\r\n    function incrementPhase(): void {\r\n        setPhase(Math.min(election.phases.length - 1, phase + 1));\r\n    }\r\n\r\n    function decrementPhase(): void {\r\n        setPhase(Math.max(0, phase - 1));\r\n    }\r\n\r\n    const activePhase = election.phases[phase];\r\n    return (\r\n        <>\r\n            <div>{activePhase && <CandidateTable candidates={activePhase.candidates}></CandidateTable>}</div>\r\n            <div className=\"info\">{activePhase && activePhase.info}</div>\r\n            <div>\r\n                <button onClick={decrementPhase} disabled={phase === 0}>\r\n                    Previous phase\r\n                </button>\r\n                <button onClick={incrementPhase} disabled={phase === election.phases.length - 1}>\r\n                    Next phase\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {election.phases[phase] &&\r\n                    election.phases[phase].ballots.map((ballot, index) => <Ballot key={index} ballot={ballot} />)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { ReactElement } from 'react';\r\n\r\nimport '../../components.css';\r\nimport { BallotState, CandidateState } from '../state/ScoreVotingElection';\r\nimport { cloneDeep } from 'lodash';\r\n\r\nexport interface Props {\r\n    ballots: BallotState[];\r\n    candidates: CandidateState[];\r\n}\r\n\r\nexport function BallotTable(props: Props): ReactElement {\r\n    const { ballots, candidates } = props;\r\n\r\n    const candidatesInOrder = cloneDeep(candidates).sort((a, b) => a.originalOrder - b.originalOrder);\r\n    return (\r\n        <div className=\"ballotTableWrapper\">\r\n            <table className=\"ballotTable\">\r\n                <tr>\r\n                    {candidatesInOrder.map((candidatesInOrder) => (\r\n                        <th key={candidatesInOrder.name}>{candidatesInOrder.name}</th>\r\n                    ))}\r\n                </tr>\r\n                {ballots.map((ballot, index) => (\r\n                    <tr key={index}>\r\n                        {ballot.map((score, index) => (\r\n                            <td key={index}>{score ?? '-'}</td>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport '../../components.css';\r\nimport { CandidateState } from '../state/ScoreVotingElection';\r\nimport { formatNumber } from '../../utils';\r\n\r\nexport interface Props {\r\n    candidate: CandidateState;\r\n    expanded: boolean;\r\n}\r\n\r\nexport function Candidate(props: Props): ReactElement {\r\n    const { candidate, expanded } = props;\r\n\r\n    return (\r\n        <tr key={candidate.name} className={`${candidate.isElected ? 'elected' : undefined} animated`}>\r\n            <td>{candidate.name}</td>\r\n            {formatNumber(candidate.averageScore, 3)}\r\n            {expanded && candidate.votesPerScore.map((votes, index) => <td key={index}>{votes}</td>)}\r\n            {expanded && <td key=\"noop\">{candidate.noOpVotes}</td>}\r\n        </tr>\r\n    );\r\n}\r\n","import React, { ReactElement, useState } from 'react';\r\n\r\nimport '../../components.css';\r\nimport { Candidate } from './Candidate';\r\nimport { CandidateState, MAX_SCORE } from '../state/ScoreVotingElection';\r\nimport { range } from '../../utils';\r\n\r\nexport interface Props {\r\n    candidates: CandidateState[];\r\n}\r\n\r\nexport function CandidateTable(props: Props): ReactElement {\r\n    const [expanded, setExpanded] = useState<boolean>(false);\r\n    const { candidates } = props;\r\n    const scores = range(MAX_SCORE);\r\n\r\n    return (\r\n        <div className=\"candidateTableWrapper\">\r\n            <table className=\"candidateTable\">\r\n                <tr>\r\n                    <th>Candidate</th>\r\n                    {<th>Average score</th>}\r\n                    {expanded && scores.map((index) => <th key={index}>{`${index + 1} ⭐`}</th>)}\r\n                    {expanded && <th>No Opinion</th>}\r\n                </tr>\r\n                {candidates.map((candidate) => (\r\n                    <Candidate key={candidate.name} candidate={candidate} expanded={expanded} />\r\n                ))}\r\n            </table>\r\n\r\n            <button className=\"expandButton\" onClick={(): void => setExpanded((current) => !current)}>\r\n                {expanded ? '<' : '...'}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","export const MAX_SCORE = 5;\r\n\r\nexport interface CandidateState {\r\n    name: string;\r\n    votesPerScore: number[];\r\n    averageScore: number;\r\n    noOpVotes: number;\r\n    originalOrder: number;\r\n    isElected: boolean;\r\n}\r\n\r\nexport type BallotState = Array<number | undefined>;\r\n\r\nexport interface ScoreVotingElectionState {\r\n    title: string;\r\n    candidates: CandidateState[];\r\n    ballots: BallotState[];\r\n}\r\n","import React, { ReactElement } from 'react';\r\n\r\nimport { ScoreVotingElectionState } from '../state/ScoreVotingElection';\r\nimport { BallotTable } from './BallotTable';\r\nimport { CandidateTable } from './CandidateTable';\r\n\r\ninterface Props {\r\n    election: ScoreVotingElectionState;\r\n}\r\n\r\nexport function Election(props: Props): ReactElement {\r\n    const { election } = props;\r\n\r\n    return (\r\n        <>\r\n            <div>{<CandidateTable candidates={election.candidates} />}</div>\r\n            <div>{<BallotTable ballots={election.ballots} candidates={election.candidates} />}</div>\r\n        </>\r\n    );\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport { ElectionResult } from './types';\r\n\r\ninterface Props {\r\n    elections: ElectionResult[];\r\n    activeIndex: number;\r\n    setActiveIndex: (index: number) => void;\r\n}\r\n\r\nexport function ElectionSelector(props: Props): ReactElement {\r\n    return (\r\n        <div className=\"electionSelector\">\r\n            <span>\r\n                <h3>Elections</h3>\r\n            </span>\r\n            {props.elections.map((election, index) => (\r\n                <button\r\n                    key={index}\r\n                    onClick={(): void => props.setActiveIndex(index)}\r\n                    disabled={index === props.activeIndex}\r\n                >\r\n                    {election.title}\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","export const ELECTIONS = [\r\n    {\r\n        fileName: 'Fall_2021.csv',\r\n        title: 'Fall 2021',\r\n        system: 'score',\r\n    },\r\n    {\r\n        fileName: 'Spring_2021.csv',\r\n        title: 'Spring 2021',\r\n        system: 'stv',\r\n    },\r\n    {\r\n        fileName: 'Inaugural_Ballot.csv',\r\n        title: 'Fall 2020',\r\n        system: 'stv',\r\n    },\r\n];\r\n","import cloneDeep from 'lodash.clonedeep';\r\n\r\nimport { NUM_ELECTED, NUM_VOTED, QUOTA_RATIO } from '../constants';\r\nimport { Ballot, Vote } from './Ballot';\r\nimport { Candidate } from './Candidate';\r\nimport { Phase } from './Election';\r\nimport { Status } from './Status';\r\n\r\nfunction calculateNewPhase(\r\n    candidates: Candidate[],\r\n    ballots: Ballot[]\r\n): { newCandidates: Candidate[]; newBallots: Ballot[] } {\r\n    const candidateStateForThisPhase = candidates.map((candidate) => ({\r\n        ...candidate,\r\n        votesOnCurrentRound: Array(NUM_VOTED).fill(0),\r\n    }));\r\n    ballots.forEach((ballot) => {\r\n        const preferences = ballot.votes.reduce((acc, vote) => {\r\n            const candidate = candidateStateForThisPhase.find((candidate) => candidate.name === vote.candidateName);\r\n            if (!candidate) {\r\n                console.error(\r\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\r\n                );\r\n            } else if (vote.status === Status.active) {\r\n                acc.push(vote);\r\n            }\r\n            return acc;\r\n        }, new Array<Vote>());\r\n        preferences.forEach((vote, index) => {\r\n            const votedCandidate = candidateStateForThisPhase.find(\r\n                (candidate) => candidate.name === vote.candidateName\r\n            );\r\n            if (votedCandidate) {\r\n                votedCandidate.votesOnCurrentRound[index] += vote.value;\r\n            } else {\r\n                // doing this mostly to keep the very strict eslint happy\r\n                console.error(\r\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\r\n                );\r\n            }\r\n        });\r\n    });\r\n\r\n    candidateStateForThisPhase.sort((a, b) => {\r\n        if (a.positionWhenElected !== undefined && b.positionWhenElected !== undefined) {\r\n            return a.positionWhenElected - b.positionWhenElected;\r\n        }\r\n        if (a.positionWhenElected !== undefined && b.positionWhenElected === undefined) {\r\n            return -1;\r\n        }\r\n        if (a.positionWhenElected === undefined && b.positionWhenElected !== undefined) {\r\n            return 1;\r\n        }\r\n        for (let i = 0; i < a.votesOnCurrentRound.length; ++i) {\r\n            const result = b.votesOnCurrentRound[i] - a.votesOnCurrentRound[i];\r\n            if (result !== 0) {\r\n                return result;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n    return { newCandidates: candidateStateForThisPhase, newBallots: ballots };\r\n}\r\n\r\nfunction eliminateCandidate(phase: Phase): string {\r\n    let eliminatedCandidateName: string | null = null;\r\n    for (let i = phase.candidates.length - 1; i >= 0; --i) {\r\n        if (phase.candidates[i].status === Status.active) {\r\n            eliminatedCandidateName = phase.candidates[i].name;\r\n            phase.candidates[i].status = Status.eliminated;\r\n            phase.candidates[i].votesOnLastStage = phase.candidates[i].votesOnCurrentRound;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (!eliminatedCandidateName) {\r\n        throw Error('Something went really wrong, no candidate could be eliminated');\r\n    } else {\r\n        phase.ballots.forEach((ballot) => {\r\n            ballot.votes.forEach((vote) => {\r\n                if (vote.candidateName === eliminatedCandidateName) {\r\n                    vote.status = Status.eliminated;\r\n                }\r\n            });\r\n        });\r\n\r\n        return eliminatedCandidateName;\r\n    }\r\n}\r\n\r\nexport const calculateElection = (candidates: Candidate[], ballots: Ballot[]): Phase[] => {\r\n    const autoElectQuota = Math.floor(ballots.length * QUOTA_RATIO) + 1; // strictly higher than the ratio\r\n    console.log(`Any candidate with ${autoElectQuota} votes or more is automatically elected`);\r\n\r\n    const phases: Phase[] = [];\r\n\r\n    const { newCandidates, newBallots } = calculateNewPhase(candidates, ballots);\r\n\r\n    phases.push({\r\n        candidates: newCandidates,\r\n        ballots: newBallots,\r\n        info: `Any candidate with ${autoElectQuota} votes or more is automatically elected`,\r\n    });\r\n\r\n    while (\r\n        phases[phases.length - 1].candidates.filter((candidate) => candidate.status === Status.elected).length <\r\n        NUM_ELECTED\r\n    ) {\r\n        console.log('Phase', phases.length, 'starting');\r\n        const phase = cloneDeep(phases[phases.length - 1]);\r\n        let someCandidateElectedThisPhase = false;\r\n\r\n        for (let i = 0; i < phase.candidates.length && !someCandidateElectedThisPhase; ++i) {\r\n            const candidate = phase.candidates[i];\r\n            const activeCandidateVotes = candidate.votesOnCurrentRound[0];\r\n            if (candidate.status !== Status.elected && activeCandidateVotes >= autoElectQuota) {\r\n                phase.candidates[i].status = Status.elected;\r\n                phase.candidates[i].votesOnLastStage = candidate.votesOnCurrentRound;\r\n                phase.candidates[i].positionWhenElected = i;\r\n                someCandidateElectedThisPhase = true;\r\n                console.log(`${candidate.name} elected!`);\r\n                const extraVotesToDistribute = (activeCandidateVotes - autoElectQuota) / activeCandidateVotes;\r\n                phase.ballots.forEach((ballot) => {\r\n                    let votedForElectedCandidate = false;\r\n                    let extraVotesDistributed = false;\r\n                    let activeCandidatesBeforeWinner = false;\r\n                    ballot.votes.forEach((vote) => {\r\n                        if (votedForElectedCandidate && !extraVotesDistributed) {\r\n                            const candidateToDistributeVotesTo = phase.candidates.find(\r\n                                (candidate) => candidate.name === vote.candidateName\r\n                            );\r\n                            if (candidateToDistributeVotesTo && candidateToDistributeVotesTo.status === Status.active) {\r\n                                vote.value = extraVotesToDistribute;\r\n                                extraVotesDistributed = true;\r\n                            }\r\n                        }\r\n                        if (vote.candidateName === candidate.name) {\r\n                            vote.status = Status.elected;\r\n                            if (!activeCandidatesBeforeWinner) {\r\n                                votedForElectedCandidate = true;\r\n                            }\r\n                        }\r\n                        if (vote.candidateName !== candidate.name && vote.status === Status.active) {\r\n                            activeCandidatesBeforeWinner = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\r\n                phases.push({\r\n                    candidates: newCandidates,\r\n                    ballots: newBallots,\r\n                    info: `${candidate.name} had more than ${autoElectQuota} votes, so they were elected!`,\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!someCandidateElectedThisPhase) {\r\n            const eliminatedName = eliminateCandidate(phase);\r\n\r\n            const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\r\n            phases.push({\r\n                candidates: newCandidates,\r\n                ballots: newBallots,\r\n                info: `${eliminatedName} had the least votes, so they were eliminated!`,\r\n            });\r\n        }\r\n    }\r\n    return phases;\r\n};\r\n","import csvParser from 'papaparse';\r\n\r\nimport { range } from '../utils';\r\nimport { NUM_VOTED } from './constants';\r\nimport { calculateElection } from './state/CalculateState';\r\nimport { Election } from './state/Election';\r\nimport { Status } from './state/Status';\r\nimport { Ballot as BallotType } from './state/Ballot';\r\n\r\nexport function calculateSTVElection(title: string, parsed: csvParser.ParseResult<unknown>): Election {\r\n    const candidateNames = (parsed.data[0] as string[]).slice(1);\r\n\r\n    const candidates = candidateNames.map((candidate) => {\r\n        const match = candidate.match(/\\[(.*)\\]/);\r\n        const name = match ? match[1] : '';\r\n        const splitName = name.split(' ');\r\n        const reorderedName = [splitName[splitName.length - 1], ...splitName.slice(0, splitName.length - 1)];\r\n        const finalName = reorderedName.join(' ');\r\n        return {\r\n            name: finalName,\r\n            status: Status.active,\r\n            votesOnCurrentRound: Array(NUM_VOTED).fill(0),\r\n        };\r\n    });\r\n\r\n    const rawBallots = (parsed.data as string[][]).slice(1);\r\n    const ballots = rawBallots.map(\r\n        (rawBallot): BallotType => {\r\n            const ballotWithoutTimestamp = rawBallot.slice(1);\r\n\r\n            const rankedCandidateNames = range(NUM_VOTED).map((number) => {\r\n                const choiceIndex = ballotWithoutTimestamp.findIndex((choice) => choice.includes(String(number + 1)));\r\n                const candidateName = candidates[choiceIndex].name;\r\n                return {\r\n                    candidateName: candidateName,\r\n                    status: Status.active,\r\n                    value: 1,\r\n                };\r\n            });\r\n\r\n            return {\r\n                votes: rankedCandidateNames,\r\n            };\r\n        }\r\n    );\r\n    const phases = calculateElection(candidates, ballots);\r\n\r\n    return {\r\n        title,\r\n        phases,\r\n    };\r\n}\r\n","import csvParser from 'papaparse';\r\nimport { NUM_ELECTED } from '../stv/constants';\r\nimport { CandidateState, MAX_SCORE, ScoreVotingElectionState } from './state/ScoreVotingElection';\r\n\r\nexport function calculateScoreVotingElection(\r\n    title: string,\r\n    parsed: csvParser.ParseResult<unknown>\r\n): ScoreVotingElectionState {\r\n    const candidateNames = (parsed.data[0] as string[]).slice(1);\r\n\r\n    const candidates: CandidateState[] = candidateNames.map((candidate, index) => {\r\n        const match = candidate.match(/\\[(.*)\\]/);\r\n        const name = match ? match[1] : '';\r\n\r\n        return {\r\n            name,\r\n            votesPerScore: Array(MAX_SCORE).fill(0),\r\n            originalOrder: index,\r\n            averageScore: 0,\r\n            noOpVotes: 0,\r\n            isElected: false,\r\n        };\r\n    });\r\n\r\n    const rawBallots = (parsed.data as string[][]).slice(1);\r\n\r\n    const ballots = rawBallots.map((rawBallot): (number | undefined)[] => {\r\n        const ballotWithoutTimestamp = rawBallot.slice(1);\r\n        const parsedScore = ballotWithoutTimestamp.map((score) => {\r\n            const match = score.match(/\\((.*)\\)/);\r\n            return (match && Number(match[1])) || undefined;\r\n        });\r\n        return parsedScore;\r\n    });\r\n\r\n    ballots.forEach((ballot) => {\r\n        ballot.forEach((vote, index) => {\r\n            if (vote !== undefined) {\r\n                candidates[index].votesPerScore[vote - 1] += 1;\r\n            }\r\n        });\r\n    });\r\n\r\n    candidates.forEach((candidate) => {\r\n        const totalScore = candidate.votesPerScore.reduce((acc, numVotes, index) => {\r\n            acc += numVotes * (index + 1);\r\n            return acc;\r\n        }, 0);\r\n\r\n        const totalVotes = candidate.votesPerScore.reduce((acc, numVotes) => {\r\n            acc += numVotes;\r\n            return acc;\r\n        }, 0);\r\n        candidate.averageScore = totalScore / totalVotes;\r\n        candidate.noOpVotes = ballots.length - totalVotes;\r\n    });\r\n\r\n    candidates.sort((a, b) => {\r\n        if (a.averageScore !== b.averageScore) {\r\n            return b.averageScore - a.averageScore;\r\n        }\r\n        if (a.noOpVotes !== b.noOpVotes) {\r\n            return b.noOpVotes - a.noOpVotes;\r\n        }\r\n        for (let i = MAX_SCORE - 1; i <= 0; --i) {\r\n            if (a.votesPerScore[i] !== b.votesPerScore[i]) {\r\n                return b.votesPerScore[i] - a.votesPerScore[i];\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    candidates.forEach((candidate, index) => (candidate.isElected = index < NUM_ELECTED));\r\n\r\n    return {\r\n        title,\r\n        candidates,\r\n        ballots,\r\n    };\r\n}\r\n","import React, { ReactElement, useEffect, useState } from 'react';\r\nimport csvParser from 'papaparse';\r\n\r\nimport './App.css';\r\nimport { Election as STVElection } from './stv/components/Election';\r\nimport { Election as STVElectionState } from './stv/state/Election';\r\nimport { Election as ScoreVotingElection } from './scoreVoting/components/Election';\r\nimport { ScoreVotingElectionState } from './scoreVoting/state/ScoreVotingElection';\r\n\r\nimport { ElectionSelector } from './ElectionSelector';\r\nimport { ELECTIONS } from './elections';\r\nimport { calculateSTVElection } from './stv/CalculateSTVElection';\r\nimport { calculateScoreVotingElection } from './scoreVoting/CalculateScoreVotingElection';\r\nimport { ElectionList } from './types';\r\n\r\nfunction App(): ReactElement {\r\n    const [fullState, setFullState] = useState<ElectionList>({ elections: [] });\r\n    const [activeElectionIndex, setActiveElectionIndex] = useState<number>(0);\r\n    useEffect(() => {\r\n        async function getData(): Promise<void> {\r\n            ELECTIONS.forEach(async ({ fileName, title, system }, index) => {\r\n                const response = await fetch(`${process.env.PUBLIC_URL}/data/${fileName}`);\r\n                const text = await response.text();\r\n                const parsed = csvParser.parse(text);\r\n\r\n                if (system === 'stv') {\r\n                    const election = calculateSTVElection(title, parsed);\r\n                    fullState.elections[index] = election;\r\n                    setFullState({ elections: fullState.elections });\r\n                } else if (system === 'score') {\r\n                    const election: ScoreVotingElectionState = calculateScoreVotingElection(title, parsed);\r\n                    fullState.elections[index] = election;\r\n                    setFullState({ elections: fullState.elections });\r\n                }\r\n            });\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    const activeElection = fullState.elections[activeElectionIndex];\r\n    const activeElectionSystem = ELECTIONS[activeElectionIndex].system;\r\n    return (\r\n        <div className=\"App\">\r\n            <ElectionSelector\r\n                elections={fullState.elections}\r\n                setActiveIndex={setActiveElectionIndex}\r\n                activeIndex={activeElectionIndex}\r\n            />\r\n            {activeElection &&\r\n                (activeElectionSystem === 'stv' ? (\r\n                    <STVElection election={activeElection as STVElectionState} />\r\n                ) : (\r\n                    <ScoreVotingElection election={activeElection as ScoreVotingElectionState} />\r\n                ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}