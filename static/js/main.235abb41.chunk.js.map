{"version":3,"sources":["state/Status.ts","utils.ts","components/Ballot.tsx","components/Candidate.tsx","constants.ts","components/CandidateTable.tsx","components/Election.tsx","state/CalculateState.ts","components/ElectionSelector.tsx","App.tsx","index.tsx"],"names":["Status","formatNumber","value","places","expandedPlaces","Math","pow","round","range","length","Array","from","keys","Ballot","props","ballot","className","votes","map","vote","key","candidateName","status","eliminated","elected","undefined","Candidate","this","candidate","expanded","votesToRender","votesOnLastStage","votesOnCurrentRound","slice","name","index","reduce","acc","React","Component","ELECTIONS","fileName","date","Date","CandidateTable","state","candidates","onClick","setState","Election","election","useState","phase","setPhase","activePhase","phases","info","max","disabled","min","ballots","calculateNewPhase","candidateStateForThisPhase","fill","forEach","find","active","push","console","error","votedCandidate","sort","a","b","positionWhenElected","i","result","newCandidates","newBallots","calculateElection","autoElectQuota","floor","log","cloneDeep","someCandidateElectedThisPhase","activeCandidateVotes","extraVotesToDistribute","votedForElectedCandidate","extraVotesDistributed","candidateToDistributeVotesTo","eliminatedName","eliminatedCandidateName","Error","eliminateCandidate","filter","ElectionSelector","elections","setActiveIndex","activeIndex","DateTime","fromJSDate","toLocaleString","DATE_FULL","App","fullState","setFullState","activeElectionIndex","setActiveElectionIndex","useEffect","fetch","process","response","text","parsed","csvParser","parse","candidateNames","data","match","splitName","split","join","rawBallots","rawBallot","ballotWithoutTimestamp","number","choiceIndex","findIndex","choice","includes","String","getData","activeElection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAAYA,E,sHAAAA,O,mBAAAA,I,qBAAAA,I,4BAAAA,M,KCAL,IAAMC,EAAe,SAACC,EAAeC,GACxC,IAAMC,EAAiBC,KAAKC,IAAI,GAAIH,GACpC,OAAOE,KAAKE,MAAML,EAAQE,GAAkBA,GAGnCI,EAAQ,SAACC,GAAD,OAA8BC,MAAMC,KAAKD,MAAMD,GAAQG,SCKrE,SAASC,EAAOC,GAA6B,IACxCC,EAAWD,EAAXC,OACR,OACI,yBAAKC,UAAU,UACX,4BACKD,EAAOE,MAAMC,KAAI,SAACC,GAAD,OACd,oCACI,wBACIC,IAAKD,EAAKE,cACVL,UAAS,UACLG,EAAKG,SAAWtB,EAAOuB,WACjB,aACAJ,EAAKG,SAAWtB,EAAOwB,QACvB,eACAC,EALD,cAQRN,EAAKE,cACU,IAAfF,EAAKjB,MAAL,WAAuBD,EAAakB,EAAKjB,MAAO,GAAhD,KAAwD,IAE7D,mC,wCCnBXwB,EAAb,uKAC4B,IAAD,EACaC,KAAKb,MAA7Bc,EADW,EACXA,UAAWC,EADA,EACAA,SAEfC,EAAgBF,EAAUG,iBAAmBH,EAAUG,iBAAmBH,EAAUI,oBAIxF,OAHKH,IACDC,EAAgBA,EAAcG,MAAM,EAAG,IAGvC,wBACIb,IAAKQ,EAAUM,KACflB,UAAS,UACLY,EAAUN,SAAWtB,EAAOuB,WACtB,aACAK,EAAUN,SAAWtB,EAAOwB,QAC5B,eACAC,EALD,cAQT,4BAAKG,EAAUM,MACdJ,EAAcZ,KAAI,SAAChB,EAAOiC,GAAR,OACf,wBAAIf,IAAKe,GAAQlC,EAAaC,EAAO,OAExC2B,GAAY,wBAAIT,IAAK,SAAUU,EAAcM,QAAO,SAACC,EAAKlB,GAAN,OAAekB,EAAMlB,IAAM,SAvBhG,GAA+BmB,IAAMC,WCPxBC,EAAY,CACrB,CACIC,SAAU,kBACVC,KAAM,IAAIC,KAAK,eAEnB,CACIF,SAAU,uBACVC,KAAM,IAAIC,KAAK,gBCMVC,EAAb,kDACI,WAAY9B,GAAe,IAAD,8BACtB,cAAMA,IACD+B,MAAQ,CACThB,UAAU,GAHQ,EAD9B,qDAQ4B,IAAD,OACXiB,EAAenB,KAAKb,MAApBgC,WACAjB,EAAaF,KAAKkB,MAAlBhB,SACJC,EAAgBtB,ED3BH,GC+BjB,OAHKqB,IACDC,EAAgBA,EAAcG,MAAM,EAAG,IAGvC,yBAAKjB,UAAU,yBACX,2BAAOA,UAAU,kBACb,kBAAC,IAAD,KACI,4BACI,yCACCc,EAAcZ,KAAI,SAACiB,GAAD,OACf,wBAAIf,IAAKe,GAAT,eAAyBA,EAAQ,EAAjC,cAEHN,GAAY,sCAEhBiB,EAAW5B,KAAI,SAACU,GAAD,OACZ,kBAAC,EAAD,CAAWR,IAAKQ,EAAUM,KAAMN,UAAWA,EAAWC,SAAU,EAAKgB,MAAMhB,gBAIvF,4BACIb,UAAU,eACV+B,QAAS,kBAAY,EAAKC,SAAS,CAAEnB,UAAW,EAAKgB,MAAMhB,aAE1DF,KAAKkB,MAAMhB,SAAW,IAAM,YAnCjD,GAAoCS,IAAMC,WCPnC,SAASU,EAASnC,GAA6B,IAC1CoC,EAAapC,EAAboC,SADyC,EAEvBC,mBAAiB,GAFM,mBAE1CC,EAF0C,KAEnCC,EAFmC,KAYjD,IAAMC,EAAcJ,EAASK,OAAOH,GACpC,OACI,oCACI,6BAAME,GAAe,kBAAC,EAAD,CAAgBR,WAAYQ,EAAYR,cAC7D,yBAAK9B,UAAU,QAAQsC,GAAeA,EAAYE,MAClD,6BACI,4BAAQT,QAVpB,WACIM,EAAShD,KAAKoD,IAAI,EAAGL,EAAQ,KASYM,SAAoB,IAAVN,GAA3C,kBAGA,4BAAQL,QAjBpB,WACIM,EAAShD,KAAKsD,IAAIT,EAASK,OAAO9C,OAAS,EAAG2C,EAAQ,KAgBbM,SAAUN,IAAUF,EAASK,OAAO9C,OAAS,GAA9E,eAIJ,6BACKyC,EAASK,OAAOH,IACbF,EAASK,OAAOH,GAAOQ,QAAQ1C,KAAI,SAACH,EAAQoB,GAAT,OAAmB,kBAACtB,EAAD,CAAQO,IAAKe,EAAOpB,OAAQA,S,6BC7BtG,SAAS8C,EACLf,EACAc,GAEA,IAAME,EAA6BhB,EAAW5B,KAAI,SAACU,GAAD,mBAAC,eAC5CA,GAD2C,IAE9CI,oBAAqBtB,MHbJ,GGaqBqD,KAAK,QA+C/C,OA7CAH,EAAQI,SAAQ,SAACjD,GACOA,EAAOE,MAAMmB,QAAO,SAACC,EAAKlB,GAS1C,OARkB2C,EAA2BG,MAAK,SAACrC,GAAD,OAAeA,EAAUM,OAASf,EAAKE,iBAK9EF,EAAKG,SAAWtB,EAAOkE,QAC9B7B,EAAI8B,KAAKhD,GAJTiD,QAAQC,MAAR,8EAC2ElD,EAAKE,cADhF,iDAMGgB,IACR,IAAI3B,OACKsD,SAAQ,SAAC7C,EAAMgB,GACvB,IAAMmC,EAAiBR,EAA2BG,MAC9C,SAACrC,GAAD,OAAeA,EAAUM,OAASf,EAAKE,iBAEvCiD,EACAA,EAAetC,oBAAoBG,IAAUhB,EAAKjB,MAGlDkE,QAAQC,MAAR,8EAC2ElD,EAAKE,cADhF,uDAOZyC,EAA2BS,MAAK,SAACC,EAAGC,GAChC,QAA8BhD,IAA1B+C,EAAEE,0BAA+DjD,IAA1BgD,EAAEC,oBACzC,OAAOF,EAAEE,oBAAsBD,EAAEC,oBAErC,QAA8BjD,IAA1B+C,EAAEE,0BAA+DjD,IAA1BgD,EAAEC,oBACzC,OAAQ,EAEZ,QAA8BjD,IAA1B+C,EAAEE,0BAA+DjD,IAA1BgD,EAAEC,oBACzC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAExC,oBAAoBvB,SAAUkE,EAAG,CACnD,IAAMC,EAASH,EAAEzC,oBAAoB2C,GAAKH,EAAExC,oBAAoB2C,GAChE,GAAe,IAAXC,EACA,OAAOA,EAGf,OAAO,KAEJ,CAAEC,cAAef,EAA4BgB,WAAYlB,GA6B7D,IAAMmB,EAAoB,SAACjC,EAAyBc,GACvD,IAAMoB,EAAiB3E,KAAK4E,MHzFL,IGyFWrB,EAAQnD,QAAwB,EAClE2D,QAAQc,IAAR,6BAAkCF,EAAlC,4CAEA,IAAMzB,EAAkB,GAJ8D,EAMhDM,EAAkBf,EAAYc,GAA5DiB,EAN8E,EAM9EA,cAAeC,EAN+D,EAM/DA,WAEvBvB,EAAOY,KAAK,CACRrB,WAAY+B,EACZjB,QAASkB,EACTtB,KAAK,sBAAD,OAAwBwB,EAAxB,6CAGR,IAdsF,iBAkBlFZ,QAAQc,IAAI,QAAS3B,EAAO9C,OAAQ,YAIpC,IAHA,IAAM2C,EAAQ+B,IAAU5B,EAAOA,EAAO9C,OAAS,IAC3C2E,GAAgC,EApB8C,WAsBzET,GACL,IAAM/C,EAAYwB,EAAMN,WAAW6B,GAC7BU,EAAuBzD,EAAUI,oBAAoB,GAC3D,GAAIJ,EAAUN,SAAWtB,EAAOwB,SAAW6D,GAAwBL,EAAgB,CAC/E5B,EAAMN,WAAW6B,GAAGrD,OAAStB,EAAOwB,QACpC4B,EAAMN,WAAW6B,GAAG5C,iBAAmBH,EAAUI,oBACjDoB,EAAMN,WAAW6B,GAAGD,oBAAsBC,EAC1CS,GAAgC,EAChChB,QAAQc,IAAR,UAAetD,EAAUM,KAAzB,cACA,IAAMoD,GAA0BD,EAAuBL,GAAkBK,EACzEjC,EAAMQ,QAAQI,SAAQ,SAACjD,GACnB,IAAIwE,GAA2B,EAC3BC,GAAwB,EAC5BzE,EAAOE,MAAM+C,SAAQ,SAAC7C,GAClB,GAAIoE,IAA6BC,EAAuB,CACpD,IAAMC,EAA+BrC,EAAMN,WAAWmB,MAClD,SAACrC,GAAD,OAAeA,EAAUM,OAASf,EAAKE,iBAEvCoE,GAAgCA,EAA6BnE,SAAWtB,EAAOkE,SAC/E/C,EAAKjB,MAAQoF,EACbE,GAAwB,GAG5BrE,EAAKE,gBAAkBO,EAAUM,OACjCf,EAAKG,OAAStB,EAAOwB,QACrB+D,GAA2B,SAtBwC,MA2BzC1B,EAAkBT,EAAMN,WAAYM,EAAMQ,SAAxEiB,EA3BuE,EA2BvEA,cAAeC,EA3BwD,EA2BxDA,WACvBvB,EAAOY,KAAK,CACRrB,WAAY+B,EACZjB,QAASkB,EACTtB,KAAK,GAAD,OAAK5B,EAAUM,KAAf,0BAAqC8C,EAArC,qCAlCPL,EAAI,EAAGA,EAAIvB,EAAMN,WAAWrC,SAAW2E,IAAiCT,EAAI,EAA5EA,GAuCT,IAAKS,EAA+B,CAChC,IAAMM,EAxFlB,SAA4BtC,GAExB,IADA,IAAIuC,EAAyC,KACpChB,EAAIvB,EAAMN,WAAWrC,OAAS,EAAGkE,GAAK,IAAKA,EAChD,GAAIvB,EAAMN,WAAW6B,GAAGrD,SAAWtB,EAAOkE,OAAQ,CAC9CyB,EAA0BvC,EAAMN,WAAW6B,GAAGzC,KAC9CkB,EAAMN,WAAW6B,GAAGrD,OAAStB,EAAOuB,WACpC6B,EAAMN,WAAW6B,GAAG5C,iBAAmBqB,EAAMN,WAAW6B,GAAG3C,oBAC3D,MAIR,GAAK2D,EAWD,OARAvC,EAAMQ,QAAQI,SAAQ,SAACjD,GACnBA,EAAOE,MAAM+C,SAAQ,SAAC7C,GACdA,EAAKE,gBAAkBsE,IACvBxE,EAAKG,OAAStB,EAAOuB,kBAK1BoE,EAVP,MAAMC,MAAM,iEA4EeC,CAAmBzC,GADV,EAGMS,EAAkBT,EAAMN,WAAYM,EAAMQ,SAAxEiB,EAHwB,EAGxBA,cAAeC,EAHS,EAGTA,WACvBvB,EAAOY,KAAK,CACRrB,WAAY+B,EACZjB,QAASkB,EACTtB,KAAK,GAAD,OAAKkC,EAAL,sDArDZnC,EAAOA,EAAO9C,OAAS,GAAGqC,WAAWgD,QAAO,SAAClE,GAAD,OAAeA,EAAUN,SAAWtB,EAAOwB,WAASf,OHzG7E,GG2GpB,IAuDH,OAAO8C,G,QCxJJ,SAASwC,EAAiBjF,GAC7B,OACI,yBAAKE,UAAU,oBACX,8BACI,0CAEHF,EAAMkF,UAAU9E,KAAI,SAACgC,EAAUf,GAAX,OACjB,4BACIf,IAAKe,EACLY,QAAS,kBAAYjC,EAAMmF,eAAe9D,IAC1CuB,SAAUvB,IAAUrB,EAAMoF,aAEzBC,WAASC,WAAWlD,EAASR,MAAM2D,eAAeF,WAASG,gBCiEjEC,MA1Ef,WAA8B,IAAD,EACSpD,mBAAgB,CAAE6C,UAAW,KADtC,mBAClBQ,EADkB,KACPC,EADO,OAE6BtD,mBAAiB,GAF9C,mBAElBuD,EAFkB,KAEGC,EAFH,KAGzBC,qBAAU,WAAM,4CACZ,sBAAApC,EAAA,sDACIhC,EAAUwB,QAAV,uCAAkB,aAA2B7B,GAA3B,iCAAAqC,EAAA,6DAAS/B,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,KAAnB,SACSmE,MAAM,GAAD,OAAIC,uBAAJ,iBAAmCrE,IADjD,cACRsE,EADQ,gBAEKA,EAASC,OAFd,OAERA,EAFQ,OAGRC,EAASC,IAAUC,MAAMH,GAEzBI,EAAkBH,EAAOI,KAAK,GAAgBpF,MAAM,GAEpDa,EAAasE,EAAelG,KAAI,SAACU,GACnC,IAAM0F,EAAQ1F,EAAU0F,MAAM,YAExBC,GADOD,EAAQA,EAAM,GAAK,IACTE,MAAM,KAM7B,MAAO,CACHtF,KANe,CACfqF,EAAUA,EAAU9G,OAAS,IADd,mBAEZ8G,EAAUtF,MAAM,EAAGsF,EAAU9G,OAAS,KAEbgH,KAAK,KAGjCnG,OAAQtB,EAAOkE,OACflC,oBAAqBtB,MLpCpB,GKoCqCqD,KAAK,OAI7C2D,EAAcT,EAAOI,KAAoBpF,MAAM,GAC/C2B,EAAU8D,EAAWxG,KACvB,SAACyG,GACG,IAAMC,EAAyBD,EAAU1F,MAAM,GAc/C,MAAO,CACHhB,MAbyBT,EL7C5B,GK6C6CU,KAAI,SAAC2G,GAC/C,IAAMC,EAAcF,EAAuBG,WAAU,SAACC,GAAD,OACjDA,EAAOC,SAASC,OAAOL,EAAS,OAGpC,MAAO,CACHxG,cAFkByB,EAAWgF,GAAa5F,KAG1CZ,OAAQtB,EAAOkE,OACfhE,MAAO,UASjBqD,EAASwB,EAAkBjC,EAAYc,GAC7C4C,EAAUR,UAAU7D,GAAS,CACzBO,OACAa,UAEJkD,EAAa,CAAET,UAAWQ,EAAUR,YAlDtB,4CAAlB,yDADJ,4CADY,uBAAC,WAAD,wBAuDZmC,KACD,IAEH,IAAMC,EAAiB5B,EAAUR,UAAUU,GAC3C,OACI,yBAAK1F,UAAU,OACX,kBAAC+E,EAAD,CACIC,UAAWQ,EAAUR,UACrBC,eAAgBU,EAChBT,YAAaQ,IAEhB0B,GAAkB,kBAACnF,EAAD,CAAUC,SAAUkF,MC7EnDC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.235abb41.chunk.js","sourcesContent":["export enum Status {\r\n    active,\r\n    elected,\r\n    eliminated,\r\n}\r\n","export const formatNumber = (value: number, places: number): number => {\r\n    const expandedPlaces = Math.pow(10, places);\r\n    return Math.round(value * expandedPlaces) / expandedPlaces;\r\n};\r\n\r\nexport const range = (length: number): number[] => Array.from(Array(length).keys());\r\n","import React, { ReactElement } from 'react';\r\nimport './components.css';\r\nimport { Ballot as BallotType } from '../state/Ballot';\r\nimport { Status } from '../state/Status';\r\nimport { formatNumber } from '../utils';\r\n\r\nexport interface Props {\r\n    ballot: BallotType;\r\n}\r\n\r\nexport function Ballot(props: Props): ReactElement {\r\n    const { ballot } = props;\r\n    return (\r\n        <div className=\"Ballot\">\r\n            <ul>\r\n                {ballot.votes.map((vote) => (\r\n                    <>\r\n                        <li\r\n                            key={vote.candidateName}\r\n                            className={`${\r\n                                vote.status === Status.eliminated\r\n                                    ? 'eliminated'\r\n                                    : vote.status === Status.elected\r\n                                    ? 'elected'\r\n                                    : undefined\r\n                            } animated`}\r\n                        >\r\n                            {vote.candidateName}\r\n                            {vote.value !== 1 ? `(${formatNumber(vote.value, 3)})` : ''}\r\n                        </li>\r\n                        <br />\r\n                    </>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport './components.css';\r\nimport { Candidate as CandidateType } from '../state/Candidate';\r\nimport { Status } from '../state/Status';\r\nimport { formatNumber } from '../utils';\r\n\r\nexport interface Props {\r\n    candidate: CandidateType;\r\n    expanded: boolean;\r\n}\r\n\r\nexport class Candidate extends React.Component<Props> {\r\n    render(): ReactElement {\r\n        const { candidate, expanded } = this.props;\r\n\r\n        let votesToRender = candidate.votesOnLastStage ? candidate.votesOnLastStage : candidate.votesOnCurrentRound;\r\n        if (!expanded) {\r\n            votesToRender = votesToRender.slice(0, 1);\r\n        }\r\n        return (\r\n            <tr\r\n                key={candidate.name}\r\n                className={`${\r\n                    candidate.status === Status.eliminated\r\n                        ? 'eliminated'\r\n                        : candidate.status === Status.elected\r\n                        ? 'elected'\r\n                        : undefined\r\n                } animated`}\r\n            >\r\n                <td>{candidate.name}</td>\r\n                {votesToRender.map((value, index) => (\r\n                    <td key={index}>{formatNumber(value, 3)}</td>\r\n                ))}\r\n                {expanded && <td key={'total'}>{votesToRender.reduce((acc, vote) => acc + vote, 0)}</td>}\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n","export const NUM_ELECTED = 3;\r\nexport const NUM_VOTED = 3;\r\nexport const QUOTA_RATIO = 0.25; // what ratio of the total votes a candidate needs to be automatically elected\r\n\r\nexport const ELECTIONS = [\r\n    {\r\n        fileName: 'Spring_2021.csv',\r\n        date: new Date('2021-04-01'),\r\n    },\r\n    {\r\n        fileName: 'Inaugural_Ballot.csv',\r\n        date: new Date('2020-10-01'),\r\n    },\r\n];\r\n","import React, { ReactElement } from 'react';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nimport './components.css';\r\nimport { Candidate as CandidateType } from '../state/Candidate';\r\nimport { Candidate } from './Candidate';\r\nimport { range } from '../utils';\r\nimport { NUM_VOTED } from '../constants';\r\n\r\nexport interface Props {\r\n    candidates: CandidateType[];\r\n}\r\n\r\nexport interface State {\r\n    expanded: boolean;\r\n}\r\n\r\nexport class CandidateTable extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            expanded: false,\r\n        };\r\n    }\r\n\r\n    render(): ReactElement {\r\n        const { candidates } = this.props;\r\n        const { expanded } = this.state;\r\n        let votesToRender = range(NUM_VOTED);\r\n        if (!expanded) {\r\n            votesToRender = votesToRender.slice(0, 1);\r\n        }\r\n        return (\r\n            <div className=\"candidateTableWrapper\">\r\n                <table className=\"candidateTable\">\r\n                    <FlipMove>\r\n                        <tr>\r\n                            <th>Candidate</th>\r\n                            {votesToRender.map((index) => (\r\n                                <th key={index}>{`Rank ${index + 1} votes`}</th>\r\n                            ))}\r\n                            {expanded && <th>Total</th>}\r\n                        </tr>\r\n                        {candidates.map((candidate) => (\r\n                            <Candidate key={candidate.name} candidate={candidate} expanded={this.state.expanded} />\r\n                        ))}\r\n                    </FlipMove>\r\n                </table>\r\n                <button\r\n                    className=\"expandButton\"\r\n                    onClick={(): void => this.setState({ expanded: !this.state.expanded })}\r\n                >\r\n                    {this.state.expanded ? '<' : '...'}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { ReactElement, useState } from 'react';\r\n\r\nimport { Ballot } from './Ballot';\r\nimport { Election as ElectionType } from './../state/Election';\r\nimport { CandidateTable } from './CandidateTable';\r\n\r\ninterface Props {\r\n    election: ElectionType;\r\n}\r\n\r\nexport function Election(props: Props): ReactElement {\r\n    const { election } = props;\r\n    const [phase, setPhase] = useState<number>(0);\r\n\r\n    function incrementPhase(): void {\r\n        setPhase(Math.min(election.phases.length - 1, phase + 1));\r\n    }\r\n\r\n    function decrementPhase(): void {\r\n        setPhase(Math.max(0, phase - 1));\r\n    }\r\n\r\n    const activePhase = election.phases[phase];\r\n    return (\r\n        <>\r\n            <div>{activePhase && <CandidateTable candidates={activePhase.candidates}></CandidateTable>}</div>\r\n            <div className=\"info\">{activePhase && activePhase.info}</div>\r\n            <div>\r\n                <button onClick={decrementPhase} disabled={phase === 0}>\r\n                    Previous phase\r\n                </button>\r\n                <button onClick={incrementPhase} disabled={phase === election.phases.length - 1}>\r\n                    Next phase\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {election.phases[phase] &&\r\n                    election.phases[phase].ballots.map((ballot, index) => <Ballot key={index} ballot={ballot} />)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import cloneDeep from 'lodash.clonedeep';\r\n\r\nimport { NUM_ELECTED, NUM_VOTED, QUOTA_RATIO } from '../constants';\r\nimport { Ballot, Vote } from './Ballot';\r\nimport { Candidate } from './Candidate';\r\nimport { Phase } from './Election';\r\nimport { Status } from './Status';\r\n\r\nfunction calculateNewPhase(\r\n    candidates: Candidate[],\r\n    ballots: Ballot[]\r\n): { newCandidates: Candidate[]; newBallots: Ballot[] } {\r\n    const candidateStateForThisPhase = candidates.map((candidate) => ({\r\n        ...candidate,\r\n        votesOnCurrentRound: Array(NUM_VOTED).fill(0),\r\n    }));\r\n    ballots.forEach((ballot) => {\r\n        const preferences = ballot.votes.reduce((acc, vote) => {\r\n            const candidate = candidateStateForThisPhase.find((candidate) => candidate.name === vote.candidateName);\r\n            if (!candidate) {\r\n                console.error(\r\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\r\n                );\r\n            } else if (vote.status === Status.active) {\r\n                acc.push(vote);\r\n            }\r\n            return acc;\r\n        }, new Array<Vote>());\r\n        preferences.forEach((vote, index) => {\r\n            const votedCandidate = candidateStateForThisPhase.find(\r\n                (candidate) => candidate.name === vote.candidateName\r\n            );\r\n            if (votedCandidate) {\r\n                votedCandidate.votesOnCurrentRound[index] += vote.value;\r\n            } else {\r\n                // doing this mostly to keep the very strict eslint happy\r\n                console.error(\r\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\r\n                );\r\n            }\r\n        });\r\n    });\r\n\r\n    candidateStateForThisPhase.sort((a, b) => {\r\n        if (a.positionWhenElected !== undefined && b.positionWhenElected !== undefined) {\r\n            return a.positionWhenElected - b.positionWhenElected;\r\n        }\r\n        if (a.positionWhenElected !== undefined && b.positionWhenElected === undefined) {\r\n            return -1;\r\n        }\r\n        if (a.positionWhenElected === undefined && b.positionWhenElected !== undefined) {\r\n            return 1;\r\n        }\r\n        for (let i = 0; i < a.votesOnCurrentRound.length; ++i) {\r\n            const result = b.votesOnCurrentRound[i] - a.votesOnCurrentRound[i];\r\n            if (result !== 0) {\r\n                return result;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n    return { newCandidates: candidateStateForThisPhase, newBallots: ballots };\r\n}\r\n\r\nfunction eliminateCandidate(phase: Phase): string {\r\n    let eliminatedCandidateName: string | null = null;\r\n    for (let i = phase.candidates.length - 1; i >= 0; --i) {\r\n        if (phase.candidates[i].status === Status.active) {\r\n            eliminatedCandidateName = phase.candidates[i].name;\r\n            phase.candidates[i].status = Status.eliminated;\r\n            phase.candidates[i].votesOnLastStage = phase.candidates[i].votesOnCurrentRound;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (!eliminatedCandidateName) {\r\n        throw Error('Something went really wrong, no candidate could be eliminated');\r\n    } else {\r\n        phase.ballots.forEach((ballot) => {\r\n            ballot.votes.forEach((vote) => {\r\n                if (vote.candidateName === eliminatedCandidateName) {\r\n                    vote.status = Status.eliminated;\r\n                }\r\n            });\r\n        });\r\n\r\n        return eliminatedCandidateName;\r\n    }\r\n}\r\n\r\nexport const calculateElection = (candidates: Candidate[], ballots: Ballot[]): Phase[] => {\r\n    const autoElectQuota = Math.floor(ballots.length * QUOTA_RATIO) + 1; // strictly higher than the ratio\r\n    console.log(`Any candidate with ${autoElectQuota} votes or more is automatically elected`);\r\n\r\n    const phases: Phase[] = [];\r\n\r\n    const { newCandidates, newBallots } = calculateNewPhase(candidates, ballots);\r\n\r\n    phases.push({\r\n        candidates: newCandidates,\r\n        ballots: newBallots,\r\n        info: `Any candidate with ${autoElectQuota} votes or more is automatically elected`,\r\n    });\r\n\r\n    while (\r\n        phases[phases.length - 1].candidates.filter((candidate) => candidate.status === Status.elected).length <\r\n        NUM_ELECTED\r\n    ) {\r\n        console.log('Phase', phases.length, 'starting');\r\n        const phase = cloneDeep(phases[phases.length - 1]);\r\n        let someCandidateElectedThisPhase = false;\r\n\r\n        for (let i = 0; i < phase.candidates.length && !someCandidateElectedThisPhase; ++i) {\r\n            const candidate = phase.candidates[i];\r\n            const activeCandidateVotes = candidate.votesOnCurrentRound[0];\r\n            if (candidate.status !== Status.elected && activeCandidateVotes >= autoElectQuota) {\r\n                phase.candidates[i].status = Status.elected;\r\n                phase.candidates[i].votesOnLastStage = candidate.votesOnCurrentRound;\r\n                phase.candidates[i].positionWhenElected = i;\r\n                someCandidateElectedThisPhase = true;\r\n                console.log(`${candidate.name} elected!`);\r\n                const extraVotesToDistribute = (activeCandidateVotes - autoElectQuota) / activeCandidateVotes;\r\n                phase.ballots.forEach((ballot) => {\r\n                    let votedForElectedCandidate = false;\r\n                    let extraVotesDistributed = false;\r\n                    ballot.votes.forEach((vote) => {\r\n                        if (votedForElectedCandidate && !extraVotesDistributed) {\r\n                            const candidateToDistributeVotesTo = phase.candidates.find(\r\n                                (candidate) => candidate.name === vote.candidateName\r\n                            );\r\n                            if (candidateToDistributeVotesTo && candidateToDistributeVotesTo.status === Status.active) {\r\n                                vote.value = extraVotesToDistribute;\r\n                                extraVotesDistributed = true;\r\n                            }\r\n                        }\r\n                        if (vote.candidateName === candidate.name) {\r\n                            vote.status = Status.elected;\r\n                            votedForElectedCandidate = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\r\n                phases.push({\r\n                    candidates: newCandidates,\r\n                    ballots: newBallots,\r\n                    info: `${candidate.name} had more than ${autoElectQuota} votes, so they were elected!`,\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!someCandidateElectedThisPhase) {\r\n            const eliminatedName = eliminateCandidate(phase);\r\n\r\n            const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\r\n            phases.push({\r\n                candidates: newCandidates,\r\n                ballots: newBallots,\r\n                info: `${eliminatedName} had the least votes, so they were eliminated!`,\r\n            });\r\n        }\r\n    }\r\n    return phases;\r\n};\r\n","import React, { ReactElement } from 'react';\r\nimport { DateTime } from 'luxon';\r\nimport { Election as ElectionType } from './../state/Election';\r\n\r\ninterface Props {\r\n    elections: ElectionType[];\r\n    activeIndex: number;\r\n    setActiveIndex: (index: number) => void;\r\n}\r\n\r\nexport function ElectionSelector(props: Props): ReactElement {\r\n    return (\r\n        <div className=\"electionSelector\">\r\n            <span>\r\n                <h3>Elections</h3>\r\n            </span>\r\n            {props.elections.map((election, index) => (\r\n                <button\r\n                    key={index}\r\n                    onClick={(): void => props.setActiveIndex(index)}\r\n                    disabled={index === props.activeIndex}\r\n                >\r\n                    {DateTime.fromJSDate(election.date).toLocaleString(DateTime.DATE_FULL)}\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React, { ReactElement, useEffect, useState } from 'react';\r\nimport csvParser from 'papaparse';\r\n\r\nimport './App.css';\r\nimport { Ballot as BallotType } from './state/Ballot';\r\nimport { Election } from './components/Election';\r\nimport { State } from './state/State';\r\nimport { Status } from './state/Status';\r\nimport { calculateElection } from './state/CalculateState';\r\nimport { range } from './utils';\r\nimport { ELECTIONS, NUM_VOTED } from './constants';\r\nimport { ElectionSelector } from './components/ElectionSelector';\r\n\r\nfunction App(): ReactElement {\r\n    const [fullState, setFullState] = useState<State>({ elections: [] });\r\n    const [activeElectionIndex, setActiveElectionIndex] = useState<number>(0);\r\n    useEffect(() => {\r\n        async function getData(): Promise<void> {\r\n            ELECTIONS.forEach(async ({ fileName, date }, index) => {\r\n                const response = await fetch(`${process.env.PUBLIC_URL}/data/${fileName}`);\r\n                const text = await response.text();\r\n                const parsed = csvParser.parse(text);\r\n\r\n                const candidateNames = (parsed.data[0] as string[]).slice(1);\r\n\r\n                const candidates = candidateNames.map((candidate) => {\r\n                    const match = candidate.match(/\\[(.*)\\]/);\r\n                    const name = match ? match[1] : '';\r\n                    const splitName = name.split(' ');\r\n                    const reorderedName = [\r\n                        splitName[splitName.length - 1],\r\n                        ...splitName.slice(0, splitName.length - 1),\r\n                    ];\r\n                    const finalName = reorderedName.join(' ');\r\n                    return {\r\n                        name: finalName,\r\n                        status: Status.active,\r\n                        votesOnCurrentRound: Array(NUM_VOTED).fill(0),\r\n                    };\r\n                });\r\n\r\n                const rawBallots = (parsed.data as string[][]).slice(1);\r\n                const ballots = rawBallots.map(\r\n                    (rawBallot): BallotType => {\r\n                        const ballotWithoutTimestamp = rawBallot.slice(1);\r\n\r\n                        const rankedCandidateNames = range(NUM_VOTED).map((number) => {\r\n                            const choiceIndex = ballotWithoutTimestamp.findIndex((choice) =>\r\n                                choice.includes(String(number + 1))\r\n                            );\r\n                            const candidateName = candidates[choiceIndex].name;\r\n                            return {\r\n                                candidateName: candidateName,\r\n                                status: Status.active,\r\n                                value: 1,\r\n                            };\r\n                        });\r\n\r\n                        return {\r\n                            votes: rankedCandidateNames,\r\n                        };\r\n                    }\r\n                );\r\n                const phases = calculateElection(candidates, ballots);\r\n                fullState.elections[index] = {\r\n                    date,\r\n                    phases,\r\n                };\r\n                setFullState({ elections: fullState.elections });\r\n            });\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    const activeElection = fullState.elections[activeElectionIndex];\r\n    return (\r\n        <div className=\"App\">\r\n            <ElectionSelector\r\n                elections={fullState.elections}\r\n                setActiveIndex={setActiveElectionIndex}\r\n                activeIndex={activeElectionIndex}\r\n            />\r\n            {activeElection && <Election election={activeElection} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}