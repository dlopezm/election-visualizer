{"version":3,"sources":["stv/state/Status.ts","utils.ts","stv/components/Ballot.tsx","stv/components/Candidate.tsx","stv/components/CandidateTable.tsx","stv/constants.ts","stv/components/Election.tsx","scoreVoting/components/BallotTable.tsx","scoreVoting/components/Candidate.tsx","scoreVoting/components/CandidateTable.tsx","scoreVoting/state/ScoreVotingElection.ts","scoreVoting/components/Election.tsx","ElectionSelector.tsx","elections.ts","stv/state/CalculateState.ts","stv/CalculateSTVElection.ts","scoreVoting/CalculateScoreVotingElection.ts","App.tsx","index.tsx"],"names":["Status","formatNumber","value","places","expandedPlaces","Math","pow","round","range","length","Array","from","keys","Ballot","props","ballot","className","votes","map","vote","key","candidateName","status","eliminated","elected","undefined","Candidate","this","candidate","expanded","votesToRender","votesOnLastStage","votesOnCurrentRound","slice","name","index","reduce","acc","React","Component","CandidateTable","state","candidates","onClick","setState","Election","election","useState","phase","setPhase","activePhase","phases","info","max","disabled","min","ballots","BallotTable","candidatesInOrder","cloneDeep","sort","a","b","originalOrder","score","isElected","averageScore","votesPerScore","noOpVotes","setExpanded","scores","current","ElectionSelector","elections","setActiveIndex","activeIndex","title","ELECTIONS","fileName","system","calculateNewPhase","candidateStateForThisPhase","fill","forEach","find","active","push","console","error","votedCandidate","positionWhenElected","i","result","newCandidates","newBallots","calculateElection","autoElectQuota","floor","log","someCandidateElectedThisPhase","activeCandidateVotes","extraVotesToDistribute","votedForElectedCandidate","extraVotesDistributed","activeCandidatesBeforeWinner","candidateToDistributeVotesTo","eliminatedName","eliminatedCandidateName","Error","eliminateCandidate","filter","calculateSTVElection","parsed","data","match","splitName","split","join","rawBallot","ballotWithoutTimestamp","number","choiceIndex","findIndex","choice","includes","String","calculateScoreVotingElection","Number","totalScore","numVotes","totalVotes","MAX_SCORE","App","fullState","setFullState","activeElectionIndex","setActiveElectionIndex","useEffect","fetch","process","response","text","csvParser","parse","getData","activeElection","activeElectionSystem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5026889d.chunk.js","sourcesContent":["export enum Status {\n    active,\n    elected,\n    eliminated,\n}\n","export const formatNumber = (value: number, places: number): number => {\n    const expandedPlaces = Math.pow(10, places);\n    return Math.round(value * expandedPlaces) / expandedPlaces;\n};\n\nexport const range = (length: number): number[] => Array.from(Array(length).keys());\n","import React, { ReactElement } from 'react';\nimport '../../components.css';\nimport { Ballot as BallotType } from '../state/Ballot';\nimport { Status } from '../state/Status';\nimport { formatNumber } from '../../utils';\n\nexport interface Props {\n    ballot: BallotType;\n}\n\nexport function Ballot(props: Props): ReactElement {\n    const { ballot } = props;\n    return (\n        <div className=\"Ballot\">\n            <ul>\n                {ballot.votes.map((vote) => (\n                    <>\n                        <li\n                            key={vote.candidateName}\n                            className={`${\n                                vote.status === Status.eliminated\n                                    ? 'eliminated'\n                                    : vote.status === Status.elected\n                                    ? 'elected'\n                                    : undefined\n                            } animated`}\n                        >\n                            {vote.candidateName}\n                            {vote.value !== 1 ? `(${formatNumber(vote.value, 3)})` : ''}\n                        </li>\n                        <br />\n                    </>\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport '../../components.css';\nimport { Candidate as CandidateType } from '../state/Candidate';\nimport { Status } from '../state/Status';\nimport { formatNumber } from '../../utils';\n\nexport interface Props {\n    candidate: CandidateType;\n    expanded: boolean;\n}\n\nexport class Candidate extends React.Component<Props> {\n    render(): ReactElement {\n        const { candidate, expanded } = this.props;\n\n        let votesToRender = candidate.votesOnLastStage ? candidate.votesOnLastStage : candidate.votesOnCurrentRound;\n        if (!expanded) {\n            votesToRender = votesToRender.slice(0, 1);\n        }\n        return (\n            <tr\n                key={candidate.name}\n                className={`${\n                    candidate.status === Status.eliminated\n                        ? 'eliminated'\n                        : candidate.status === Status.elected\n                        ? 'elected'\n                        : undefined\n                } animated`}\n            >\n                <td>{candidate.name}</td>\n                {votesToRender.map((value, index) => (\n                    <td key={index}>{formatNumber(value, 3)}</td>\n                ))}\n                {expanded && <td key={'total'}>{votesToRender.reduce((acc, vote) => acc + vote, 0)}</td>}\n            </tr>\n        );\n    }\n}\n","import React, { ReactElement } from 'react';\n\nimport '../../components.css';\nimport { Candidate as CandidateType } from '../state/Candidate';\nimport { Candidate } from './Candidate';\nimport { range } from '../../utils';\nimport { NUM_VOTED } from '../constants';\n\nexport interface Props {\n    candidates: CandidateType[];\n}\n\nexport interface State {\n    expanded: boolean;\n}\n\nexport class CandidateTable extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            expanded: false,\n        };\n    }\n\n    render(): ReactElement {\n        const { candidates } = this.props;\n        const { expanded } = this.state;\n        let votesToRender = range(NUM_VOTED);\n        if (!expanded) {\n            votesToRender = votesToRender.slice(0, 1);\n        }\n        return (\n            <div className=\"candidateTableWrapper\">\n                <table className=\"candidateTable\">\n                    <tr>\n                        <th>Candidate</th>\n                        {votesToRender.map((index) => (\n                            <th key={index}>{`Rank ${index + 1} votes`}</th>\n                        ))}\n                        {expanded && <th>Total</th>}\n                    </tr>\n                    {candidates.map((candidate) => (\n                        <Candidate key={candidate.name} candidate={candidate} expanded={this.state.expanded} />\n                    ))}\n                </table>\n\n                <button\n                    className=\"expandButton\"\n                    onClick={(): void => this.setState({ expanded: !this.state.expanded })}\n                >\n                    {this.state.expanded ? '<' : '...'}\n                </button>\n            </div>\n        );\n    }\n}\n","export const NUM_ELECTED = 3;\nexport const NUM_VOTED = 3;\nexport const QUOTA_RATIO = 0.25; // what ratio of the total votes a candidate needs to be automatically elected\n","import React, { ReactElement, useState } from 'react';\n\nimport { Ballot } from './Ballot';\nimport { Election as ElectionType } from './../state/Election';\nimport { CandidateTable } from './CandidateTable';\n\ninterface Props {\n    election: ElectionType;\n}\n\nexport function Election(props: Props): ReactElement {\n    const { election } = props;\n    const [phase, setPhase] = useState<number>(0);\n\n    function incrementPhase(): void {\n        setPhase(Math.min(election.phases.length - 1, phase + 1));\n    }\n\n    function decrementPhase(): void {\n        setPhase(Math.max(0, phase - 1));\n    }\n\n    const activePhase = election.phases[phase];\n    return (\n        <>\n            <div>{activePhase && <CandidateTable candidates={activePhase.candidates}></CandidateTable>}</div>\n            <div className=\"info\">{activePhase && activePhase.info}</div>\n            <div>\n                <button onClick={decrementPhase} disabled={phase === 0}>\n                    Previous phase\n                </button>\n                <button onClick={incrementPhase} disabled={phase === election.phases.length - 1}>\n                    Next phase\n                </button>\n            </div>\n            <div>\n                {election.phases[phase] &&\n                    election.phases[phase].ballots.map((ballot, index) => <Ballot key={index} ballot={ballot} />)}\n            </div>\n        </>\n    );\n}\n","import React, { ReactElement } from 'react';\n\nimport '../../components.css';\nimport { BallotState, CandidateState } from '../state/ScoreVotingElection';\nimport { cloneDeep } from 'lodash';\n\nexport interface Props {\n    ballots: BallotState[];\n    candidates: CandidateState[];\n}\n\nexport function BallotTable(props: Props): ReactElement {\n    const { ballots, candidates } = props;\n\n    const candidatesInOrder = cloneDeep(candidates).sort((a, b) => a.originalOrder - b.originalOrder);\n    return (\n        <div className=\"ballotTableWrapper\">\n            <table className=\"ballotTable\">\n                <tr>\n                    {candidatesInOrder.map((candidatesInOrder) => (\n                        <th key={candidatesInOrder.name}>{candidatesInOrder.name}</th>\n                    ))}\n                </tr>\n                {ballots.map((ballot, index) => (\n                    <tr key={index}>\n                        {ballot.map((score, index) => (\n                            <td key={index}>{score ?? '-'}</td>\n                        ))}\n                    </tr>\n                ))}\n            </table>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport '../../components.css';\nimport { CandidateState } from '../state/ScoreVotingElection';\nimport { formatNumber } from '../../utils';\n\nexport interface Props {\n    candidate: CandidateState;\n    expanded: boolean;\n}\n\nexport function Candidate(props: Props): ReactElement {\n    const { candidate, expanded } = props;\n\n    return (\n        <tr key={candidate.name} className={`${candidate.isElected ? 'elected' : undefined} animated`}>\n            <td>{candidate.name}</td>\n            {formatNumber(candidate.averageScore, 3)}\n            {expanded && candidate.votesPerScore.map((votes, index) => <td key={index}>{votes}</td>)}\n            {expanded && <td key=\"noop\">{candidate.noOpVotes}</td>}\n        </tr>\n    );\n}\n","import React, { ReactElement, useState } from 'react';\n\nimport '../../components.css';\nimport { Candidate } from './Candidate';\nimport { CandidateState, MAX_SCORE } from '../state/ScoreVotingElection';\nimport { range } from '../../utils';\n\nexport interface Props {\n    candidates: CandidateState[];\n}\n\nexport function CandidateTable(props: Props): ReactElement {\n    const [expanded, setExpanded] = useState<boolean>(false);\n    const { candidates } = props;\n    const scores = range(MAX_SCORE);\n\n    return (\n        <div className=\"candidateTableWrapper\">\n            <table className=\"candidateTable\">\n                <tr>\n                    <th>Candidate</th>\n                    {<th>Average score</th>}\n                    {expanded && scores.map((index) => <th key={index}>{`${index + 1} ⭐`}</th>)}\n                    {expanded && <th>No Opinion</th>}\n                </tr>\n                {candidates.map((candidate) => (\n                    <Candidate key={candidate.name} candidate={candidate} expanded={expanded} />\n                ))}\n            </table>\n\n            <button className=\"expandButton\" onClick={(): void => setExpanded((current) => !current)}>\n                {expanded ? '<' : '...'}\n            </button>\n        </div>\n    );\n}\n","export const MAX_SCORE = 5;\n\nexport interface CandidateState {\n    name: string;\n    votesPerScore: number[];\n    averageScore: number;\n    noOpVotes: number;\n    originalOrder: number;\n    isElected: boolean;\n}\n\nexport type BallotState = Array<number | undefined>;\n\nexport interface ScoreVotingElectionState {\n    title: string;\n    candidates: CandidateState[];\n    ballots: BallotState[];\n}\n","import React, { ReactElement } from 'react';\n\nimport { ScoreVotingElectionState } from '../state/ScoreVotingElection';\nimport { BallotTable } from './BallotTable';\nimport { CandidateTable } from './CandidateTable';\n\ninterface Props {\n    election: ScoreVotingElectionState;\n}\n\nexport function Election(props: Props): ReactElement {\n    const { election } = props;\n\n    return (\n        <>\n            <div>{<CandidateTable candidates={election.candidates} />}</div>\n            <div>{<BallotTable ballots={election.ballots} candidates={election.candidates} />}</div>\n        </>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport { ElectionResult } from './types';\n\ninterface Props {\n    elections: ElectionResult[];\n    activeIndex: number;\n    setActiveIndex: (index: number) => void;\n}\n\nexport function ElectionSelector(props: Props): ReactElement {\n    return (\n        <div className=\"electionSelector\">\n            <span>\n                <h3>Elections</h3>\n            </span>\n            {props.elections.map((election, index) => (\n                <button\n                    key={index}\n                    onClick={(): void => props.setActiveIndex(index)}\n                    disabled={index === props.activeIndex}\n                >\n                    {election.title}\n                </button>\n            ))}\n        </div>\n    );\n}\n","export const ELECTIONS = [\n    {\n        fileName: 'Fall_2022.csv',\n        title: 'Fall 2022',\n        system: 'score',\n    },\n    {\n        fileName: 'Spring_2022.csv',\n        title: 'Spring 2022',\n        system: 'score',\n    },\n    {\n        fileName: 'Fall_2021.csv',\n        title: 'Fall 2021',\n        system: 'score',\n    },\n    {\n        fileName: 'Spring_2021.csv',\n        title: 'Spring 2021',\n        system: 'stv',\n    },\n    {\n        fileName: 'Inaugural_Ballot.csv',\n        title: 'Fall 2020',\n        system: 'stv',\n    },\n];\n","import cloneDeep from 'lodash.clonedeep';\n\nimport { NUM_ELECTED, NUM_VOTED, QUOTA_RATIO } from '../constants';\nimport { Ballot, Vote } from './Ballot';\nimport { Candidate } from './Candidate';\nimport { Phase } from './Election';\nimport { Status } from './Status';\n\nfunction calculateNewPhase(\n    candidates: Candidate[],\n    ballots: Ballot[]\n): { newCandidates: Candidate[]; newBallots: Ballot[] } {\n    const candidateStateForThisPhase = candidates.map((candidate) => ({\n        ...candidate,\n        votesOnCurrentRound: Array(NUM_VOTED).fill(0),\n    }));\n    ballots.forEach((ballot) => {\n        const preferences = ballot.votes.reduce((acc, vote) => {\n            const candidate = candidateStateForThisPhase.find((candidate) => candidate.name === vote.candidateName);\n            if (!candidate) {\n                console.error(\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\n                );\n            } else if (vote.status === Status.active) {\n                acc.push(vote);\n            }\n            return acc;\n        }, new Array<Vote>());\n        preferences.forEach((vote, index) => {\n            const votedCandidate = candidateStateForThisPhase.find(\n                (candidate) => candidate.name === vote.candidateName\n            );\n            if (votedCandidate) {\n                votedCandidate.votesOnCurrentRound[index] += vote.value;\n            } else {\n                // doing this mostly to keep the very strict eslint happy\n                console.error(\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\n                );\n            }\n        });\n    });\n\n    candidateStateForThisPhase.sort((a, b) => {\n        if (a.positionWhenElected !== undefined && b.positionWhenElected !== undefined) {\n            return a.positionWhenElected - b.positionWhenElected;\n        }\n        if (a.positionWhenElected !== undefined && b.positionWhenElected === undefined) {\n            return -1;\n        }\n        if (a.positionWhenElected === undefined && b.positionWhenElected !== undefined) {\n            return 1;\n        }\n        for (let i = 0; i < a.votesOnCurrentRound.length; ++i) {\n            const result = b.votesOnCurrentRound[i] - a.votesOnCurrentRound[i];\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    });\n    return { newCandidates: candidateStateForThisPhase, newBallots: ballots };\n}\n\nfunction eliminateCandidate(phase: Phase): string {\n    let eliminatedCandidateName: string | null = null;\n    for (let i = phase.candidates.length - 1; i >= 0; --i) {\n        if (phase.candidates[i].status === Status.active) {\n            eliminatedCandidateName = phase.candidates[i].name;\n            phase.candidates[i].status = Status.eliminated;\n            phase.candidates[i].votesOnLastStage = phase.candidates[i].votesOnCurrentRound;\n            break;\n        }\n    }\n\n    if (!eliminatedCandidateName) {\n        throw Error('Something went really wrong, no candidate could be eliminated');\n    } else {\n        phase.ballots.forEach((ballot) => {\n            ballot.votes.forEach((vote) => {\n                if (vote.candidateName === eliminatedCandidateName) {\n                    vote.status = Status.eliminated;\n                }\n            });\n        });\n\n        return eliminatedCandidateName;\n    }\n}\n\nexport const calculateElection = (candidates: Candidate[], ballots: Ballot[]): Phase[] => {\n    const autoElectQuota = Math.floor(ballots.length * QUOTA_RATIO) + 1; // strictly higher than the ratio\n    console.log(`Any candidate with ${autoElectQuota} votes or more is automatically elected`);\n\n    const phases: Phase[] = [];\n\n    const { newCandidates, newBallots } = calculateNewPhase(candidates, ballots);\n\n    phases.push({\n        candidates: newCandidates,\n        ballots: newBallots,\n        info: `Any candidate with ${autoElectQuota} votes or more is automatically elected`,\n    });\n\n    while (\n        phases[phases.length - 1].candidates.filter((candidate) => candidate.status === Status.elected).length <\n        NUM_ELECTED\n    ) {\n        console.log('Phase', phases.length, 'starting');\n        const phase = cloneDeep(phases[phases.length - 1]);\n        let someCandidateElectedThisPhase = false;\n\n        for (let i = 0; i < phase.candidates.length && !someCandidateElectedThisPhase; ++i) {\n            const candidate = phase.candidates[i];\n            const activeCandidateVotes = candidate.votesOnCurrentRound[0];\n            if (candidate.status !== Status.elected && activeCandidateVotes >= autoElectQuota) {\n                phase.candidates[i].status = Status.elected;\n                phase.candidates[i].votesOnLastStage = candidate.votesOnCurrentRound;\n                phase.candidates[i].positionWhenElected = i;\n                someCandidateElectedThisPhase = true;\n                console.log(`${candidate.name} elected!`);\n                const extraVotesToDistribute = (activeCandidateVotes - autoElectQuota) / activeCandidateVotes;\n                phase.ballots.forEach((ballot) => {\n                    let votedForElectedCandidate = false;\n                    let extraVotesDistributed = false;\n                    let activeCandidatesBeforeWinner = false;\n                    ballot.votes.forEach((vote) => {\n                        if (votedForElectedCandidate && !extraVotesDistributed) {\n                            const candidateToDistributeVotesTo = phase.candidates.find(\n                                (candidate) => candidate.name === vote.candidateName\n                            );\n                            if (candidateToDistributeVotesTo && candidateToDistributeVotesTo.status === Status.active) {\n                                vote.value = extraVotesToDistribute;\n                                extraVotesDistributed = true;\n                            }\n                        }\n                        if (vote.candidateName === candidate.name) {\n                            vote.status = Status.elected;\n                            if (!activeCandidatesBeforeWinner) {\n                                votedForElectedCandidate = true;\n                            }\n                        }\n                        if (vote.candidateName !== candidate.name && vote.status === Status.active) {\n                            activeCandidatesBeforeWinner = true;\n                        }\n                    });\n                });\n\n                const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\n                phases.push({\n                    candidates: newCandidates,\n                    ballots: newBallots,\n                    info: `${candidate.name} had more than ${autoElectQuota} votes, so they were elected!`,\n                });\n            }\n        }\n\n        if (!someCandidateElectedThisPhase) {\n            const eliminatedName = eliminateCandidate(phase);\n\n            const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\n            phases.push({\n                candidates: newCandidates,\n                ballots: newBallots,\n                info: `${eliminatedName} had the least votes, so they were eliminated!`,\n            });\n        }\n    }\n    return phases;\n};\n","import csvParser from 'papaparse';\n\nimport { range } from '../utils';\nimport { NUM_VOTED } from './constants';\nimport { calculateElection } from './state/CalculateState';\nimport { Election } from './state/Election';\nimport { Status } from './state/Status';\nimport { Ballot as BallotType } from './state/Ballot';\n\nexport function calculateSTVElection(title: string, parsed: csvParser.ParseResult<unknown>): Election {\n    const candidateNames = (parsed.data[0] as string[]).slice(1);\n\n    const candidates = candidateNames.map((candidate) => {\n        const match = candidate.match(/\\[(.*)\\]/);\n        const name = match ? match[1] : '';\n        const splitName = name.split(' ');\n        const reorderedName = [splitName[splitName.length - 1], ...splitName.slice(0, splitName.length - 1)];\n        const finalName = reorderedName.join(' ');\n        return {\n            name: finalName,\n            status: Status.active,\n            votesOnCurrentRound: Array(NUM_VOTED).fill(0),\n        };\n    });\n\n    const rawBallots = (parsed.data as string[][]).slice(1);\n    const ballots = rawBallots.map(\n        (rawBallot): BallotType => {\n            const ballotWithoutTimestamp = rawBallot.slice(1);\n\n            const rankedCandidateNames = range(NUM_VOTED).map((number) => {\n                const choiceIndex = ballotWithoutTimestamp.findIndex((choice) => choice.includes(String(number + 1)));\n                const candidateName = candidates[choiceIndex].name;\n                return {\n                    candidateName: candidateName,\n                    status: Status.active,\n                    value: 1,\n                };\n            });\n\n            return {\n                votes: rankedCandidateNames,\n            };\n        }\n    );\n    const phases = calculateElection(candidates, ballots);\n\n    return {\n        title,\n        phases,\n    };\n}\n","import csvParser from 'papaparse';\nimport { NUM_ELECTED } from '../stv/constants';\nimport { CandidateState, MAX_SCORE, ScoreVotingElectionState } from './state/ScoreVotingElection';\n\nexport function calculateScoreVotingElection(\n    title: string,\n    parsed: csvParser.ParseResult<unknown>\n): ScoreVotingElectionState {\n    const candidateNames = (parsed.data[0] as string[]).slice(1);\n\n    const candidates: CandidateState[] = candidateNames.map((candidate, index) => {\n        const match = candidate.match(/\\[(.*)\\]/);\n        const name = match ? match[1] : '';\n\n        return {\n            name,\n            votesPerScore: Array(MAX_SCORE).fill(0),\n            originalOrder: index,\n            averageScore: 0,\n            noOpVotes: 0,\n            isElected: false,\n        };\n    });\n\n    const rawBallots = (parsed.data as string[][]).slice(1);\n\n    const ballots = rawBallots.map((rawBallot): (number | undefined)[] => {\n        const ballotWithoutTimestamp = rawBallot.slice(1);\n        const parsedScore = ballotWithoutTimestamp.map((score) => {\n            const match = score.match(/\\((.*)\\)/);\n            return (match && Number(match[1])) || undefined;\n        });\n        return parsedScore;\n    });\n\n    ballots.forEach((ballot) => {\n        ballot.forEach((vote, index) => {\n            if (vote !== undefined) {\n                candidates[index].votesPerScore[vote - 1] += 1;\n            }\n        });\n    });\n\n    candidates.forEach((candidate) => {\n        const totalScore = candidate.votesPerScore.reduce((acc, numVotes, index) => {\n            acc += numVotes * (index + 1);\n            return acc;\n        }, 0);\n\n        const totalVotes = candidate.votesPerScore.reduce((acc, numVotes) => {\n            acc += numVotes;\n            return acc;\n        }, 0);\n        candidate.averageScore = totalScore / totalVotes;\n        candidate.noOpVotes = ballots.length - totalVotes;\n    });\n\n    candidates.sort((a, b) => {\n        if (a.averageScore !== b.averageScore) {\n            return b.averageScore - a.averageScore;\n        }\n        if (a.noOpVotes !== b.noOpVotes) {\n            return b.noOpVotes - a.noOpVotes;\n        }\n        for (let i = MAX_SCORE - 1; i <= 0; --i) {\n            if (a.votesPerScore[i] !== b.votesPerScore[i]) {\n                return b.votesPerScore[i] - a.votesPerScore[i];\n            }\n        }\n        return 0;\n    });\n\n    candidates.forEach((candidate, index) => (candidate.isElected = index < NUM_ELECTED));\n\n    return {\n        title,\n        candidates,\n        ballots,\n    };\n}\n","import React, { ReactElement, useEffect, useState } from 'react';\nimport csvParser from 'papaparse';\n\nimport './App.css';\nimport { Election as STVElection } from './stv/components/Election';\nimport { Election as STVElectionState } from './stv/state/Election';\nimport { Election as ScoreVotingElection } from './scoreVoting/components/Election';\nimport { ScoreVotingElectionState } from './scoreVoting/state/ScoreVotingElection';\n\nimport { ElectionSelector } from './ElectionSelector';\nimport { ELECTIONS } from './elections';\nimport { calculateSTVElection } from './stv/CalculateSTVElection';\nimport { calculateScoreVotingElection } from './scoreVoting/CalculateScoreVotingElection';\nimport { ElectionList } from './types';\n\nfunction App(): ReactElement {\n    const [fullState, setFullState] = useState<ElectionList>({ elections: [] });\n    const [activeElectionIndex, setActiveElectionIndex] = useState<number>(0);\n    useEffect(() => {\n        async function getData(): Promise<void> {\n            ELECTIONS.forEach(async ({ fileName, title, system }, index) => {\n                const response = await fetch(`${process.env.PUBLIC_URL}/data/${fileName}`);\n                const text = await response.text();\n                const parsed = csvParser.parse(text);\n\n                if (system === 'stv') {\n                    const election = calculateSTVElection(title, parsed);\n                    fullState.elections[index] = election;\n                    setFullState({ elections: fullState.elections });\n                } else if (system === 'score') {\n                    const election: ScoreVotingElectionState = calculateScoreVotingElection(title, parsed);\n                    fullState.elections[index] = election;\n                    setFullState({ elections: fullState.elections });\n                }\n            });\n        }\n        getData();\n    }, []);\n\n    const activeElection = fullState.elections[activeElectionIndex];\n    const activeElectionSystem = ELECTIONS[activeElectionIndex].system;\n    return (\n        <div className=\"App\">\n            <ElectionSelector\n                elections={fullState.elections}\n                setActiveIndex={setActiveElectionIndex}\n                activeIndex={activeElectionIndex}\n            />\n            {activeElection &&\n                (activeElectionSystem === 'stv' ? (\n                    <STVElection election={activeElection as STVElectionState} />\n                ) : (\n                    <ScoreVotingElection election={activeElection as ScoreVotingElectionState} />\n                ))}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}