{"version":3,"sources":["state/Status.ts","utils.ts","components/Candidate.tsx","components/Ballot.tsx","constants.ts","state/CalculateState.ts","App.tsx","index.tsx"],"names":["Status","formatNumber","value","places","expandedPlaces","Math","pow","round","Candidate","candidate","this","props","className","status","eliminated","elected","undefined","name","votesWhenElected","votesOnCurrentRound","map","join","renderVotes","React","Component","Ballot","ballot","votes","vote","key","candidateName","calculateNewPhase","candidates","ballots","candidateStateForThisPhase","Array","fill","forEach","reduce","acc","find","active","push","console","error","index","votedCandidate","sort","a","b","positionWhenElected","i","length","result","newCandidates","newBallots","calculateState","autoElectQuota","ceil","log","state","phases","activePhase","phase","cloneDeep","someCandidateElectedThisPhase","activeCandidateVotes","extraVotesToDistribute","votedForElectedCandidate","extraVotesDistributed","candidateToDistributeVotesTo","eliminatedCandidateName","eliminateCandidate","filter","App","useState","fullState","setFullState","useEffect","fetch","process","response","text","parsed","csvParser","parse","candidateNames","data","slice","match","rawBallots","rawBallot","ballotWithoutTimestamp","from","keys","number","choiceIndex","findIndex","choice","includes","String","getData","onClick","max","disabled","min","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAAYA,E,2JAAAA,O,mBAAAA,I,qBAAAA,I,4BAAAA,M,KCAL,IAAMC,EAAe,SAACC,EAAeC,GACxC,IAAMC,EAAiBC,KAAKC,IAAI,GAAIH,GACpC,OAAOE,KAAKE,MAAML,EAAQE,GAAkBA,GCsBnCI,EAAb,uKAC4B,IACZC,EAAcC,KAAKC,MAAnBF,UACR,OACI,yBACIG,UACIH,EAAUI,SAAWb,EAAOc,WACtB,aACAL,EAAUI,SAAWb,EAAOe,QAC5B,eACAC,GAGV,8BAAOP,EAAUQ,MA3Bb,SAACR,GACjB,OAAIA,EAAUI,SAAWb,EAAOc,WACrB,KAGP,sCAEKL,EAAUS,iBACLjB,EAAaQ,EAAUS,iBAAkB,GACzCT,EAAUU,oBAAoBC,KAAI,SAAClB,GAAD,OAAWD,EAAaC,EAAO,MAAImB,KAAK,MAmB3EC,CAAYb,QAd7B,GAA+Bc,IAAMC,WCd9B,SAASC,EAAOd,GAA6B,IACxCe,EAAWf,EAAXe,OACR,OACI,yBAAKd,UAAU,UACX,4BACKc,EAAOC,MAAMP,KAAI,SAACQ,GAAD,OACd,oCACI,wBACIC,IAAKD,EAAKE,cACVlB,UACIgB,EAAKf,SAAWb,EAAOc,WACjB,aACAc,EAAKf,SAAWb,EAAOe,QACvB,eACAC,GAGTY,EAAKE,cACU,IAAfF,EAAK1B,MAAL,WAAuBD,EAAa2B,EAAK1B,MAAO,GAAhD,KAAwD,IAE7D,mCC9BjB,I,iBCQP,SAAS6B,EACLC,EACAC,GAEA,IAAMC,EAA6BF,EAAWZ,KAAI,SAACX,GAAD,mBAAC,eAC5CA,GAD2C,IAE9CU,oBAAqBgB,MDdF,GCcqBC,KAAK,QA+CjD,OA7CAH,EAAQI,SAAQ,SAACX,GACOA,EAAOC,MAAMW,QAAO,SAACC,EAAKX,GAS1C,OARkBM,EAA2BM,MAAK,SAAC/B,GAAD,OAAeA,EAAUQ,OAASW,EAAKE,iBAK9EF,EAAKf,SAAWb,EAAOyC,QAC9BF,EAAIG,KAAKd,GAJTe,QAAQC,MAAR,8EAC2EhB,EAAKE,cADhF,iDAMGS,IACR,IAAIJ,OACKE,SAAQ,SAACT,EAAMiB,GACvB,IAAMC,EAAiBZ,EAA2BM,MAC9C,SAAC/B,GAAD,OAAeA,EAAUQ,OAASW,EAAKE,iBAEvCgB,EACAA,EAAe3B,oBAAoB0B,IAAUjB,EAAK1B,MAGlDyC,QAAQC,MAAR,8EAC2EhB,EAAKE,cADhF,uDAOZI,EAA2Ba,MAAK,SAACC,EAAGC,GAChC,QAA8BjC,IAA1BgC,EAAEE,0BAA+DlC,IAA1BiC,EAAEC,oBACzC,OAAOF,EAAEE,oBAAsBD,EAAEC,oBAErC,QAA8BlC,IAA1BgC,EAAEE,0BAA+DlC,IAA1BiC,EAAEC,oBACzC,OAAQ,EAEZ,QAA8BlC,IAA1BgC,EAAEE,0BAA+DlC,IAA1BiC,EAAEC,oBACzC,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAE7B,oBAAoBiC,SAAUD,EAAG,CACnD,IAAME,EAASJ,EAAE9B,oBAAoBgC,GAAKH,EAAE7B,oBAAoBgC,GAChE,GAAe,IAAXE,EACA,OAAOA,EAGf,OAAO,KAEJ,CAAEC,cAAepB,EAA4BqB,WAAYtB,GAsB7D,IAAMuB,EAAiB,SAACxB,EAAyBC,GACpD,IAAMwB,EAAiBpD,KAAKqD,KDnFL,ICmFUzB,EAAQmB,QACzCT,QAAQgB,IAAR,6BAAkCF,EAAlC,4CAEA,IAAMG,EAAe,CAAEC,OAAQ,GAAIC,YAAa,GAJiC,EAM3C/B,EAAkBC,EAAYC,GAA5DqB,EANyE,EAMzEA,cAAeC,EAN0D,EAM1DA,WAEvBK,EAAMC,OAAOnB,KAAK,CACdV,WAAYsB,EACZrB,QAASsB,IAGb,IAbiF,iBAiB7EZ,QAAQgB,IAAI,QAASC,EAAMC,OAAOT,OAAQ,YAI1C,IAHA,IAAMW,EAAQC,IAAUJ,EAAMC,OAAOD,EAAMC,OAAOT,OAAS,IACvDa,GAAgC,EAnByC,WAqBpEd,GACL,IAAM1C,EAAYsD,EAAM/B,WAAWmB,GAC7Be,EAAuBzD,EAAUU,oBAAoB,GAC3D,GAAIV,EAAUI,SAAWb,EAAOe,SAAWmD,GAAwBT,EAAgB,CAC/EM,EAAM/B,WAAWmB,GAAGtC,OAASb,EAAOe,QACpCgD,EAAM/B,WAAWmB,GAAGjC,iBAAmBgD,EACvCH,EAAM/B,WAAWmB,GAAGD,oBAAsBC,EAC1Cc,GAAgC,EAChCtB,QAAQgB,IAAR,UAAelD,EAAUQ,KAAzB,cACA,IAAMkD,GAA0BD,EAAuBT,GAAkBS,EACzEH,EAAM9B,QAAQI,SAAQ,SAACX,GACnB,IAAI0C,GAA2B,EAC3BC,GAAwB,EAC5B3C,EAAOC,MAAMU,SAAQ,SAACT,GAClB,GAAIwC,IAA6BC,EAAuB,CACpD,IAAMC,EAA+BP,EAAM/B,WAAWQ,MAClD,SAAC/B,GAAD,OAAeA,EAAUQ,OAASW,EAAKE,iBAEvCwC,GAAgCA,EAA6BzD,SAAWb,EAAOyC,SAC/Eb,EAAK1B,MAAQiE,EACbE,GAAwB,GAG5BzC,EAAKE,gBAAkBrB,EAAUQ,OACjCW,EAAKf,OAASb,EAAOe,QACrBqD,GAA2B,SAtBwC,MA2BzCrC,EAAkBgC,EAAM/B,WAAY+B,EAAM9B,SAAxEqB,EA3BuE,EA2BvEA,cAAeC,EA3BwD,EA2BxDA,WACvBK,EAAMC,OAAOnB,KAAK,CACdV,WAAYsB,EACZrB,QAASsB,MAjCZJ,EAAI,EAAGA,EAAIY,EAAM/B,WAAWoB,SAAWa,IAAiCd,EAAI,EAA5EA,GAsCT,IAAKc,EAA+B,EA9E5C,SAA4BF,GAExB,IADA,IAAIQ,EAAyC,KACpCpB,EAAIY,EAAM/B,WAAWoB,OAAS,EAAGD,GAAK,IAAKA,EAChD,GAAIY,EAAM/B,WAAWmB,GAAGtC,SAAWb,EAAOyC,OAAQ,CAC9C8B,EAA0BR,EAAM/B,WAAWmB,GAAGlC,KAC9C8C,EAAM/B,WAAWmB,GAAGtC,OAASb,EAAOc,WACpC,MAIRiD,EAAM9B,QAAQI,SAAQ,SAACX,GACnBA,EAAOC,MAAMU,SAAQ,SAACT,GACdA,EAAKE,gBAAkByC,IACvB3C,EAAKf,OAASb,EAAOc,kBAkEzB0D,CAAmBT,GADa,MAGMhC,EAAkBgC,EAAM/B,WAAY+B,EAAM9B,SAAxEqB,EAHwB,EAGxBA,cAAeC,EAHS,EAGTA,WACvBK,EAAMC,OAAOnB,KAAK,CACdV,WAAYsB,EACZrB,QAASsB,MAnDjBK,EAAMC,OAAOD,EAAMC,OAAOT,OAAS,GAAGpB,WAAWyC,QAAO,SAAChE,GAAD,OAAeA,EAAUI,SAAWb,EAAOe,WAC9FqC,ODlGc,GCmGpB,IAqDH,OAAOQ,GChDIc,MA3Ff,WAA8B,IAAD,EACSC,mBAAgB,CAAEd,OAAQ,GAAIC,YAAa,IADpD,mBAClBc,EADkB,KACPC,EADO,KA8DzB,OA5DAC,qBAAU,WAAM,4CACZ,0CAAA9B,EAAA,sEAC2B+B,MAAM,GAAD,OAAIC,uBAAJ,+BADhC,cACUC,EADV,gBAEuBA,EAASC,OAFhC,OAEUA,EAFV,OAGUC,EAASC,IAAUC,MAAMH,GAEzBI,EAAkBH,EAAOI,KAAK,GAAgBC,MAAM,GAEpDxD,EAAasD,EAAelE,KAAI,SAACX,GACnC,IAAMgF,EAAQhF,EAAUgF,MAAM,YAE9B,MAAO,CACHxE,KAFSwE,EAAQA,EAAM,GAAK,GAG5B5E,OAAQb,EAAOyC,OACftB,oBAAqBgB,MF7Bd,GE6BiCC,KAAK,OAI/CsD,EAAcP,EAAOI,KAAoBC,MAAM,GAC/CvD,EAAUyD,EAAWtE,KACvB,SAACuE,GACG,IAAMC,EAAyBD,EAAUH,MAAM,GAc/C,MAAO,CACH7D,MAbyBQ,MAAM0D,KAAK1D,MFtCjC,GEsCoD2D,QAAQ1E,KAAI,SAAC2E,GACpE,IAAMC,EAAcJ,EAAuBK,WAAU,SAACC,GAAD,OACjDA,EAAOC,SAASC,OAAOL,EAAS,OAGpC,MAAO,CACHjE,cAFkBE,EAAWgE,GAAa/E,KAG1CJ,OAAQb,EAAOyC,OACfvC,MAAO,UASjB0D,EAAQJ,EAAexB,EAAYC,GACzC4C,EAAajB,GAxCjB,6CADY,uBAAC,WAAD,wBA2CZyC,KACD,IAiBC,yBAAKzF,UAAU,OACX,6BACKgE,EAAUf,OAAOe,EAAUd,cACxB,kBAAC,IAAD,KACKc,EAAUf,OAAOe,EAAUd,aAAa9B,WAAWZ,KAAI,SAACX,GAAD,OACpD,kBAAC,EAAD,CAAWoB,IAAKpB,EAAUQ,KAAMR,UAAWA,SAK3D,6BACI,4BAAQ6F,QAnBpB,WACIzB,EAAa,2BACND,GADK,IAERd,YAAazD,KAAKkG,IAAI,EAAG3B,EAAUd,YAAc,OAgBZ0C,SAAoC,IAA1B5B,EAAUd,aAArD,kBAGA,4BAAQwC,QA7BpB,WACIzB,EAAa,2BACND,GADK,IAERd,YAAazD,KAAKoG,IAAI7B,EAAUf,OAAOT,OAAS,EAAGwB,EAAUd,YAAc,OA0BtC0C,SAAU5B,EAAUd,cAAgBc,EAAUf,OAAOT,OAAS,GAA/F,eAIJ,6BACKwB,EAAUf,OAAOe,EAAUd,cACxBc,EAAUf,OAAOe,EAAUd,aAAa7B,QAAQb,KAAI,SAACM,EAAQmB,GAAT,OAChD,kBAACpB,EAAD,CAAQI,IAAKgB,EAAOnB,OAAQA,UC5FpDgF,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,U","file":"static/js/main.ec30d5d5.chunk.js","sourcesContent":["export enum Status {\r\n    active,\r\n    elected,\r\n    eliminated,\r\n}\r\n","export const formatNumber = (value: number, places: number): number => {\r\n    const expandedPlaces = Math.pow(10, places);\r\n    return Math.round(value * expandedPlaces) / expandedPlaces;\r\n};\r\n","import React, { ReactElement } from 'react';\r\nimport './components.css';\r\nimport { Candidate as CandidateType } from '../state/Candidate';\r\nimport { Status } from '../state/Status';\r\nimport { formatNumber } from '../utils';\r\n\r\nexport interface Props {\r\n    candidate: CandidateType;\r\n}\r\n\r\nconst renderVotes = (candidate: CandidateType): ReactElement | null => {\r\n    if (candidate.status === Status.eliminated) {\r\n        return null;\r\n    }\r\n    return (\r\n        <span>\r\n            :&nbsp;\r\n            {candidate.votesWhenElected\r\n                ? formatNumber(candidate.votesWhenElected, 3)\r\n                : candidate.votesOnCurrentRound.map((value) => formatNumber(value, 3)).join(' ')}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport class Candidate extends React.Component<Props> {\r\n    render(): ReactElement {\r\n        const { candidate } = this.props;\r\n        return (\r\n            <div\r\n                className={\r\n                    candidate.status === Status.eliminated\r\n                        ? 'eliminated'\r\n                        : candidate.status === Status.elected\r\n                        ? 'elected'\r\n                        : undefined\r\n                }\r\n            >\r\n                <span>{candidate.name}</span>\r\n                {renderVotes(candidate)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport './components.css';\r\nimport { Ballot as BallotType } from '../state/Ballot';\r\nimport { Status } from '../state/Status';\r\nimport { formatNumber } from '../utils';\r\n\r\nexport interface Props {\r\n    ballot: BallotType;\r\n}\r\n\r\nexport function Ballot(props: Props): ReactElement {\r\n    const { ballot } = props;\r\n    return (\r\n        <div className=\"Ballot\">\r\n            <ul>\r\n                {ballot.votes.map((vote) => (\r\n                    <>\r\n                        <li\r\n                            key={vote.candidateName}\r\n                            className={\r\n                                vote.status === Status.eliminated\r\n                                    ? 'eliminated'\r\n                                    : vote.status === Status.elected\r\n                                    ? 'elected'\r\n                                    : undefined\r\n                            }\r\n                        >\r\n                            {vote.candidateName}\r\n                            {vote.value !== 1 ? `(${formatNumber(vote.value, 3)})` : ''}\r\n                        </li>\r\n                        <br />\r\n                    </>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n","export const NUM_ELECTED = 3;\r\nexport const QUOTA_RATIO = 0.25; // what ratio of the total votes a candidate needs to be automatically elected\r\n","import cloneDeep from 'lodash.clonedeep';\r\n\r\nimport { NUM_ELECTED, QUOTA_RATIO } from '../constants';\r\nimport { Ballot, Vote } from './Ballot';\r\nimport { Candidate } from './Candidate';\r\nimport { Phase, State } from './State';\r\nimport { Status } from './Status';\r\n\r\nfunction calculateNewPhase(\r\n    candidates: Candidate[],\r\n    ballots: Ballot[]\r\n): { newCandidates: Candidate[]; newBallots: Ballot[] } {\r\n    const candidateStateForThisPhase = candidates.map((candidate) => ({\r\n        ...candidate,\r\n        votesOnCurrentRound: Array(NUM_ELECTED).fill(0),\r\n    }));\r\n    ballots.forEach((ballot) => {\r\n        const preferences = ballot.votes.reduce((acc, vote) => {\r\n            const candidate = candidateStateForThisPhase.find((candidate) => candidate.name === vote.candidateName);\r\n            if (!candidate) {\r\n                console.error(\r\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\r\n                );\r\n            } else if (vote.status === Status.active) {\r\n                acc.push(vote);\r\n            }\r\n            return acc;\r\n        }, new Array<Vote>());\r\n        preferences.forEach((vote, index) => {\r\n            const votedCandidate = candidateStateForThisPhase.find(\r\n                (candidate) => candidate.name === vote.candidateName\r\n            );\r\n            if (votedCandidate) {\r\n                votedCandidate.votesOnCurrentRound[index] += vote.value;\r\n            } else {\r\n                // doing this mostly to keep the very strict eslint happy\r\n                console.error(\r\n                    `Something went horribly wrong, trying to assing a vote to candidate ${vote.candidateName}, but it was not found on the candidate list`\r\n                );\r\n            }\r\n        });\r\n    });\r\n\r\n    candidateStateForThisPhase.sort((a, b) => {\r\n        if (a.positionWhenElected !== undefined && b.positionWhenElected !== undefined) {\r\n            return a.positionWhenElected - b.positionWhenElected;\r\n        }\r\n        if (a.positionWhenElected !== undefined && b.positionWhenElected === undefined) {\r\n            return -1;\r\n        }\r\n        if (a.positionWhenElected === undefined && b.positionWhenElected !== undefined) {\r\n            return 1;\r\n        }\r\n        for (let i = 0; i < a.votesOnCurrentRound.length; ++i) {\r\n            const result = b.votesOnCurrentRound[i] - a.votesOnCurrentRound[i];\r\n            if (result !== 0) {\r\n                return result;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n    return { newCandidates: candidateStateForThisPhase, newBallots: ballots };\r\n}\r\n\r\nfunction eliminateCandidate(phase: Phase): void {\r\n    let eliminatedCandidateName: string | null = null;\r\n    for (let i = phase.candidates.length - 1; i >= 0; --i) {\r\n        if (phase.candidates[i].status === Status.active) {\r\n            eliminatedCandidateName = phase.candidates[i].name;\r\n            phase.candidates[i].status = Status.eliminated;\r\n            break;\r\n        }\r\n    }\r\n\r\n    phase.ballots.forEach((ballot) => {\r\n        ballot.votes.forEach((vote) => {\r\n            if (vote.candidateName === eliminatedCandidateName) {\r\n                vote.status = Status.eliminated;\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport const calculateState = (candidates: Candidate[], ballots: Ballot[]): State => {\r\n    const autoElectQuota = Math.ceil(ballots.length * QUOTA_RATIO);\r\n    console.log(`Any candidate with ${autoElectQuota} votes or more is automatically elected`);\r\n\r\n    const state: State = { phases: [], activePhase: 0 };\r\n\r\n    const { newCandidates, newBallots } = calculateNewPhase(candidates, ballots);\r\n\r\n    state.phases.push({\r\n        candidates: newCandidates,\r\n        ballots: newBallots,\r\n    });\r\n\r\n    while (\r\n        state.phases[state.phases.length - 1].candidates.filter((candidate) => candidate.status === Status.elected)\r\n            .length < NUM_ELECTED\r\n    ) {\r\n        console.log('Phase', state.phases.length, 'starting');\r\n        const phase = cloneDeep(state.phases[state.phases.length - 1]);\r\n        let someCandidateElectedThisPhase = false;\r\n\r\n        for (let i = 0; i < phase.candidates.length && !someCandidateElectedThisPhase; ++i) {\r\n            const candidate = phase.candidates[i];\r\n            const activeCandidateVotes = candidate.votesOnCurrentRound[0];\r\n            if (candidate.status !== Status.elected && activeCandidateVotes >= autoElectQuota) {\r\n                phase.candidates[i].status = Status.elected;\r\n                phase.candidates[i].votesWhenElected = activeCandidateVotes;\r\n                phase.candidates[i].positionWhenElected = i;\r\n                someCandidateElectedThisPhase = true;\r\n                console.log(`${candidate.name} elected!`);\r\n                const extraVotesToDistribute = (activeCandidateVotes - autoElectQuota) / activeCandidateVotes;\r\n                phase.ballots.forEach((ballot) => {\r\n                    let votedForElectedCandidate = false;\r\n                    let extraVotesDistributed = false;\r\n                    ballot.votes.forEach((vote) => {\r\n                        if (votedForElectedCandidate && !extraVotesDistributed) {\r\n                            const candidateToDistributeVotesTo = phase.candidates.find(\r\n                                (candidate) => candidate.name === vote.candidateName\r\n                            );\r\n                            if (candidateToDistributeVotesTo && candidateToDistributeVotesTo.status === Status.active) {\r\n                                vote.value = extraVotesToDistribute;\r\n                                extraVotesDistributed = true;\r\n                            }\r\n                        }\r\n                        if (vote.candidateName === candidate.name) {\r\n                            vote.status = Status.elected;\r\n                            votedForElectedCandidate = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\r\n                state.phases.push({\r\n                    candidates: newCandidates,\r\n                    ballots: newBallots,\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!someCandidateElectedThisPhase) {\r\n            eliminateCandidate(phase);\r\n\r\n            const { newCandidates, newBallots } = calculateNewPhase(phase.candidates, phase.ballots);\r\n            state.phases.push({\r\n                candidates: newCandidates,\r\n                ballots: newBallots,\r\n            });\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","import React, { ReactElement, useEffect, useState } from 'react';\r\nimport csvParser from 'papaparse';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nimport './App.css';\r\nimport { Candidate } from './components/Candidate';\r\nimport { Ballot } from './components/Ballot';\r\nimport { Ballot as BallotType } from './state/Ballot';\r\nimport { State } from './state/State';\r\nimport { NUM_ELECTED } from './constants';\r\nimport { Status } from './state/Status';\r\nimport { calculateState } from './state/CalculateState';\r\n\r\nfunction App(): ReactElement {\r\n    const [fullState, setFullState] = useState<State>({ phases: [], activePhase: 0 });\r\n    useEffect(() => {\r\n        async function getData(): Promise<void> {\r\n            const response = await fetch(`${process.env.PUBLIC_URL}/data/Inaugural_Ballot.csv`);\r\n            const text = await response.text();\r\n            const parsed = csvParser.parse(text);\r\n\r\n            const candidateNames = (parsed.data[0] as string[]).slice(1);\r\n\r\n            const candidates = candidateNames.map((candidate) => {\r\n                const match = candidate.match(/\\[(.*)\\]/);\r\n                const name = match ? match[1] : '';\r\n                return {\r\n                    name,\r\n                    status: Status.active,\r\n                    votesOnCurrentRound: Array(NUM_ELECTED).fill(0),\r\n                };\r\n            });\r\n\r\n            const rawBallots = (parsed.data as string[][]).slice(1);\r\n            const ballots = rawBallots.map(\r\n                (rawBallot): BallotType => {\r\n                    const ballotWithoutTimestamp = rawBallot.slice(1);\r\n\r\n                    const rankedCandidateNames = Array.from(Array(NUM_ELECTED).keys()).map((number) => {\r\n                        const choiceIndex = ballotWithoutTimestamp.findIndex((choice) =>\r\n                            choice.includes(String(number + 1))\r\n                        );\r\n                        const candidateName = candidates[choiceIndex].name;\r\n                        return {\r\n                            candidateName: candidateName,\r\n                            status: Status.active,\r\n                            value: 1,\r\n                        };\r\n                    });\r\n\r\n                    return {\r\n                        votes: rankedCandidateNames,\r\n                    };\r\n                }\r\n            );\r\n            const state = calculateState(candidates, ballots);\r\n            setFullState(state);\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    function incrementPhase(): void {\r\n        setFullState({\r\n            ...fullState,\r\n            activePhase: Math.min(fullState.phases.length - 1, fullState.activePhase + 1),\r\n        });\r\n    }\r\n\r\n    function decrementPhase(): void {\r\n        setFullState({\r\n            ...fullState,\r\n            activePhase: Math.max(0, fullState.activePhase - 1),\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                {fullState.phases[fullState.activePhase] && (\r\n                    <FlipMove>\r\n                        {fullState.phases[fullState.activePhase].candidates.map((candidate) => (\r\n                            <Candidate key={candidate.name} candidate={candidate} />\r\n                        ))}\r\n                    </FlipMove>\r\n                )}\r\n            </div>\r\n            <div>\r\n                <button onClick={decrementPhase} disabled={fullState.activePhase === 0}>\r\n                    Previous phase\r\n                </button>\r\n                <button onClick={incrementPhase} disabled={fullState.activePhase === fullState.phases.length - 1}>\r\n                    Next phase\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {fullState.phases[fullState.activePhase] &&\r\n                    fullState.phases[fullState.activePhase].ballots.map((ballot, index) => (\r\n                        <Ballot key={index} ballot={ballot} />\r\n                    ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}